Nodes
1;special;;;
2;statement;HashMap<Integer, Integer> inc = new HashMap<Integer, Integer>();14;
3;statement;HashMap<Integer, Integer> dcr = new HashMap<Integer, Integer>();15;
4;statement;int[] len_inc = new int[foo_1];16;
5;statement;int[] len_dcr = new int[foo_1];17;
6;statement;int longLen = 0;18;
7;statement;int i = 0;19;
8;conditional;foo_1 < foo_2;20;
9;statement;int len = 0;22;
10;conditional;fun_1(foo_2[foo_3] - 1);23;
11;statement;len = fun_1(foo_2[foo_3] - 1);23;
12;statement;foo_1[foo_2] = foo_3 + 1;24;
13;statement;fun_1(foo_2[foo_3], foo_4[foo_5]);25;
14;statement;i++;21;
15;statement;int i = foo_1 - 1;27;
16;conditional;foo_1 >= 0;28;
17;statement;int len = 0;30;
18;conditional;fun_1(foo_2[foo_3] - 1);31;
19;statement;len = fun_1(foo_2[foo_3] - 1);31;
20;statement;foo_1[foo_2] = foo_3 + 1;32;
21;statement;fun_1(foo_2[foo_3], foo_4[foo_5]);33;
22;statement;i--;29;
23;statement;int i = 0;35;
24;conditional;foo_1 < foo_2;36;
25;conditional;foo_1 < ((foo_2[foo_3] + foo_4[foo_5]) - 1);37;
26;statement;longLen = (foo_1[foo_2] + foo_3[foo_4]) - 1;37;
27;statement;i++;37;
28;statement;return foo_1;38;
29;exit;;;
Edges
0;2;
1;3;
2;4;
3;5;
4;6;
5;7;
6;8;
7;9;15;
8;10;
9;11;12;
10;12;
11;13;
12;14;
13;8;
14;16;
15;17;23;
16;18;
17;19;20;
18;20;
19;21;
20;22;
21;16;
22;24;
23;25;28;
24;26;27;
25;27;
26;24;
27;29;
28;
