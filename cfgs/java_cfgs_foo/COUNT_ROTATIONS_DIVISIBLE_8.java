Nodes
1;special;;;
2;statement;int len = fun_1();14;
3;statement;int count = 0;15;
4;conditional;foo_1 == 1;16;
5;statement;int oneDigit = fun_1(0) - '0';17;
6;conditional;(foo_1 % 8) == 0;18;
7;statement;return 1;18;
8;exit;;;
9;statement;return 0;19;
10;conditional;foo_1 == 2;21;
11;statement;int first = ((fun_1(0) - '0') * 10) + (fun_2(1) - '0');22;
12;statement;int second = ((fun_1(1) - '0') * 10) + (fun_2(0) - '0');23;
13;conditional;(foo_1 % 8) == 0;24;
14;statement;count++;24;
15;conditional;(foo_1 % 8) == 0;25;
16;statement;count++;25;
17;statement;return foo_1;26;
18;statement;int threeDigit;28;
19;statement;int i = 0;29;
20;conditional;foo_1 < (foo_2 - 2);30;
21;statement;threeDigit = (((fun_1(foo_2) - '0') * 100) + ((fun_2(foo_4 + 1) - '0') * 10)) + (fun_3(foo_6 + 2) - '0');32;
22;conditional;(foo_1 % 8) == 0;33;
23;statement;count++;33;
24;statement;i++;31;
25;statement;threeDigit = (((fun_1(foo_2 - 1) - '0') * 100) + ((fun_2(0) - '0') * 10)) + (fun_3(1) - '0');35;
26;conditional;(foo_1 % 8) == 0;36;
27;statement;count++;36;
28;statement;threeDigit = (((fun_1(foo_2 - 2) - '0') * 100) + ((fun_2(foo_4 - 1) - '0') * 10)) + (fun_3(0) - '0');37;
29;conditional;(foo_1 % 8) == 0;38;
30;statement;count++;38;
31;statement;return foo_1;39;
Edges
0;2;
1;3;
2;4;
3;5;10;
4;6;
5;7;9;
6;8;
7;
8;8;
9;11;18;
10;12;
11;13;
12;14;15;
13;15;
14;16;17;
15;17;
16;8;
17;19;
18;20;
19;21;25;
20;22;
21;23;24;
22;24;
23;20;
24;26;
25;27;28;
26;28;
27;29;
28;30;31;
29;31;
30;8;
