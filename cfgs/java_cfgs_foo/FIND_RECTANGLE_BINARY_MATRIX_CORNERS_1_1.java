Nodes
1;special;;;
2;statement;int rows = foo_1.length;12;
3;conditional;foo_1 == 0;13;
4;statement;return false;14;
5;exit;;;
6;statement;int columns = foo_1[0].length;15;
7;statement;HashMap<Integer, HashSet<Integer>> table = new HashMap<>();17;
8;statement;int i = 0;19;
9;conditional;foo_1 < foo_2;19;
10;statement;int j = 0;20;
11;conditional;foo_1 < (foo_2 - 1);20;
12;statement;int k = foo_1 + 1;21;
13;conditional;foo_1 < foo_2;21;
14;conditional;(foo_1[foo_2][foo_3] == 1) && (foo_4[foo_5][foo_6] == 1);22;
15;conditional;fun_1(foo_2) && fun_3(foo_4).fun_2(foo_5);23;
16;statement;return true;24;
17;conditional;fun_1(foo_2) && fun_3(foo_4).fun_2(foo_5);26;
18;statement;return true;27;
19;conditional;!fun_1(foo_2);30;
20;statement;HashSet<Integer> x = new HashSet<>();31;
21;statement;fun_1(foo_2);32;
22;statement;fun_1(foo_2, foo_3);33;
23;statement;fun_2(foo_2).fun_1(foo_3);35;
24;conditional;!fun_1(foo_2);37;
25;statement;HashSet<Integer> x = new HashSet<>();38;
26;statement;fun_1(foo_2);39;
27;statement;fun_1(foo_2, foo_3);40;
28;statement;fun_2(foo_2).fun_1(foo_3);42;
29;statement;k++;21;
30;statement;j++;20;
31;statement;i++;19;
32;statement;return false;48;
Edges
0;2;
1;3;
2;4;6;
3;5;
4;
5;7;
6;8;
7;9;
8;10;32;
9;11;
10;12;31;
11;13;
12;14;30;
13;15;29;
14;16;17;
15;5;
16;18;19;
17;5;
18;20;23;
19;21;
20;22;
21;24;
22;24;
23;25;28;
24;26;
25;27;
26;29;
27;29;
28;13;
29;11;
30;9;
31;5;
