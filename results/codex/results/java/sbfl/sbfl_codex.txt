Testing tarantula
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({51: 10, 52: 10, 53: 10, 55: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 62: 10, 63: 10, 65: 10, 64: 10, 66: 10, 61: 10})})
51 {51: 0, 52: 0, 53: 0, 55: 0, 54: 0, 56: 0, 57: 0, 59: 0, 60: 0, 62: 0, 63: 0, 65: 0, 64: 0, 66: 0, 61: 0} ['51']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/EULERIAN_NUMBER_1.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/EULERIAN_NUMBER_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 9, 43: 9, 44: 9, 46: 9, 47: 9, 49: 9, 50: 9, 52: 9, 53: 9, 48: 9, 54: 5, 45: 5, 51: 4}), 'PASS': Counter({42: 1, 43: 1, 44: 1, 46: 1, 47: 1, 49: 1, 50: 1, 52: 1, 53: 1, 48: 1})})
54 {42: 0.5, 43: 0.5, 44: 0.5, 46: 0.5, 47: 0.5, 49: 0.5, 50: 0.5, 52: 0.5, 53: 0.5, 48: 0.5, 54: 1.0, 45: 1.0, 51: 1.0} ['42']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ABSOLUTE_DIFFERENCE_ARRAY.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ABSOLUTE_DIFFERENCE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 9, 44: 9, 45: 9, 46: 9, 47: 9, 49: 9, 50: 9, 51: 9, 53: 9, 54: 9, 55: 9}), 'PASS': Counter({43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 49: 1, 50: 1, 51: 1, 53: 1, 54: 1, 55: 1})})
43 {43: 0.5, 44: 0.5, 45: 0.5, 46: 0.5, 47: 0.5, 49: 0.5, 50: 0.5, 51: 0.5, 53: 0.5, 54: 0.5, 55: 0.5} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DICE_THROW_PROBLEM.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DICE_THROW_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 10, 47: 10, 46: 10, 48: 1})})
40 {40: 0, 41: 0, 42: 0, 43: 0, 44: 0, 45: 0, 47: 0, 46: 0, 48: 0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 9, 56: 9, 57: 9, 58: 9, 59: 9, 60: 9, 61: 9, 62: 9, 65: 9, 66: 9, 67: 9, 63: 4, 64: 4, 68: 3, 69: 3, 70: 3, 71: 3, 72: 3, 73: 3, 74: 3}), 'PASS': Counter({55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 68: 1, 69: 1, 73: 1, 74: 1})})
61 {55: 0.5, 56: 0.5, 57: 0.5, 58: 0.5, 59: 0.5, 60: 0.5, 61: 1.0, 62: 1.0, 65: 1.0, 66: 1.0, 67: 1.0, 68: 0.25, 69: 0.25, 70: 1.0, 71: 1.0, 72: 1.0, 73: 0.25, 74: 0.25, 63: 1.0, 64: 1.0} ['56', '57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME_WITH_PERMUTATIONS_ALLOWED.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME_WITH_PERMUTATIONS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({37: 10, 38: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10})})
37 {37: 0, 38: 0, 40: 0, 41: 0, 42: 0, 43: 0, 44: 0} ['39']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({38: 10, 39: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 3, 46: 3})})
38 {38: 0, 39: 0, 40: 0, 41: 0, 42: 0, 43: 0, 44: 0, 45: 0, 46: 0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 66: 5, 58: 5, 65: 1})})
49 {49: 0, 50: 0, 51: 0, 52: 0, 53: 0, 54: 0, 56: 0, 57: 0, 59: 0, 60: 0, 61: 0, 62: 0, 63: 0, 64: 0, 66: 0, 58: 0, 65: 0} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY_1.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 7, 55: 7, 56: 7, 58: 7, 57: 7, 59: 5, 60: 5, 61: 5, 63: 5, 62: 5, 64: 3, 65: 3, 66: 3, 69: 3, 70: 3, 72: 3, 73: 3, 74: 3, 75: 3, 78: 2, 67: 2, 76: 1, 81: 1}), 'PASS': Counter({54: 3, 55: 3, 56: 3, 58: 3, 57: 3, 59: 3, 60: 3, 61: 3, 63: 3, 62: 3, 64: 2, 65: 2, 66: 2, 69: 2, 70: 2, 72: 2, 73: 2, 74: 2, 75: 2, 78: 2, 67: 2, 80: 2, 81: 2})})
76 {54: 0.5, 55: 0.5, 56: 0.5, 58: 0.5, 57: 0.5, 59: 0.41666666666666663, 60: 0.41666666666666663, 61: 0.41666666666666663, 63: 0.41666666666666663, 62: 0.41666666666666663, 64: 0.391304347826087, 65: 0.391304347826087, 66: 0.391304347826087, 69: 0.391304347826087, 70: 0.391304347826087, 72: 0.391304347826087, 73: 0.391304347826087, 74: 0.391304347826087, 75: 0.391304347826087, 78: 0.3, 67: 0.3, 76: 1.0, 81: 0.1764705882352941, 80: 0.0} ['59']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 53: 7, 52: 7, 54: 6, 55: 5, 56: 5, 58: 5, 59: 5, 67: 5, 57: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 60: 4}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 53: 3, 52: 3, 54: 3, 55: 3, 56: 3, 58: 3, 59: 3, 67: 3, 57: 3, 61: 1, 62: 1, 63: 1, 65: 1, 66: 1, 60: 1})})
64 {49: 0.5, 50: 0.5, 51: 0.5, 53: 0.5, 52: 0.5, 54: 0.4615384615384615, 55: 0.41666666666666663, 56: 0.41666666666666663, 58: 0.41666666666666663, 59: 0.41666666666666663, 61: 0.6315789473684211, 62: 0.6315789473684211, 63: 0.6315789473684211, 64: 1.0, 65: 0.6315789473684211, 66: 0.6315789473684211, 60: 0.6315789473684211, 67: 0.41666666666666663, 57: 0.41666666666666663} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROME_SUB_STRINGS_STRING.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROME_SUB_STRINGS_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 64: 10, 61: 7, 62: 7, 65: 7, 66: 7, 67: 7, 68: 7, 70: 7, 74: 7, 73: 6, 71: 5, 75: 4, 69: 2, 76: 1, 77: 1})})
55 {55: 0, 56: 0, 57: 0, 58: 0, 59: 0, 60: 0, 61: 0, 62: 0, 64: 0, 65: 0, 66: 0, 67: 0, 68: 0, 70: 0, 73: 0, 74: 0, 75: 0, 71: 0, 69: 0, 76: 0, 77: 0} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_AND_NON_OVERLAPPING_SUBSTRING.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_AND_NON_OVERLAPPING_SUBSTRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 71: 4, 76: 4, 77: 4, 61: 3, 62: 3, 66: 3, 63: 2, 64: 2, 65: 2, 72: 1, 73: 1, 74: 1, 75: 1}), 'PASS': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 71: 1, 76: 1, 77: 1})})
72 {53: 0.5, 54: 0.5, 55: 0.5, 56: 0.5, 57: 0.5, 58: 0.5, 59: 0.5, 60: 0.5, 67: 0.5, 69: 0.5, 70: 0.5, 71: 0.8, 76: 0.8, 77: 0.8, 61: 0.4285714285714286, 62: 0.4285714285714286, 66: 0.4285714285714286, 63: 0.3333333333333333, 64: 0.3333333333333333, 65: 0.3333333333333333, 72: 1.0, 73: 1.0, 74: 1.0, 75: 1.0} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 4, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 1}), 'PASS': Counter({43: 6, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 4, 54: 3, 55: 3})})
44 {43: 0.5, 44: 0.6000000000000001, 45: 0.6000000000000001, 46: 0.6000000000000001, 47: 0.6000000000000001, 51: 0.6000000000000001, 53: 0.27272727272727276, 54: 0.0, 55: 0.0} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({59: 7, 60: 7, 61: 7, 62: 7, 63: 7, 64: 7, 68: 7, 69: 7, 71: 7, 74: 7, 75: 7, 76: 7, 77: 7, 82: 7, 92: 7, 93: 7, 83: 7, 87: 7, 91: 7, 95: 7, 96: 7, 97: 7, 98: 7, 99: 7, 65: 6, 66: 6, 67: 6, 88: 6, 89: 6, 78: 5, 81: 5, 79: 1}), 'PASS': Counter({59: 3, 60: 3, 61: 3, 62: 3, 63: 3, 64: 3, 65: 3, 66: 3, 67: 3, 68: 3, 69: 3, 71: 3, 99: 3, 72: 2, 74: 1, 75: 1, 76: 1, 77: 1, 82: 1, 83: 1, 87: 1, 88: 1, 89: 1, 91: 1, 92: 1, 93: 1, 95: 1, 96: 1, 97: 1, 98: 1})})
78 {59: 0.5, 60: 0.5, 61: 0.5, 62: 0.5, 63: 0.5, 64: 0.5, 68: 0.5, 69: 0.5, 65: 0.4615384615384615, 66: 0.4615384615384615, 67: 0.4615384615384615, 71: 0.5, 74: 0.75, 75: 0.75, 76: 0.75, 77: 0.75, 82: 0.75, 92: 0.75, 93: 0.75, 83: 0.75, 87: 0.75, 88: 0.72, 89: 0.72, 91: 0.75, 78: 1.0, 79: 1.0, 81: 1.0, 95: 0.75, 96: 0.75, 97: 0.75, 98: 0.75, 99: 0.5, 72: 0.0} ['97']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 10, 54: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 68: 10, 69: 10, 63: 10, 64: 4, 65: 4, 66: 4, 70: 1, 71: 1})})
53 {53: 0, 54: 0, 55: 0, 56: 0, 57: 0, 58: 0, 59: 0, 60: 0, 61: 0, 68: 0, 69: 0, 63: 0, 64: 0, 65: 0, 66: 0, 70: 0, 71: 0} ['57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/UNBOUNDED_KNAPSACK_REPETITION_ITEMS_ALLOWED.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/UNBOUNDED_KNAPSACK_REPETITION_ITEMS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({36: 9, 37: 9, 38: 9, 39: 9, 42: 9, 43: 9, 40: 5, 44: 2, 45: 2}), 'PASS': Counter({36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 42: 1, 43: 1})})
44 {36: 0.5, 37: 0.5, 38: 0.5, 39: 0.5, 42: 0.5, 43: 0.5, 44: 1.0, 45: 1.0, 40: 0.35714285714285715} ['36']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 10, 43: 10, 44: 10, 45: 10, 46: 10, 47: 10, 48: 10, 50: 10})})
42 {42: 0, 43: 0, 44: 0, 45: 0, 46: 0, 47: 0, 48: 0, 50: 0} ['43']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 8, 50: 8, 53: 8, 54: 8, 55: 8, 57: 8, 58: 8, 60: 8, 61: 8, 62: 8, 63: 8, 70: 8, 77: 8, 59: 8, 64: 8, 68: 8, 78: 8, 56: 8, 71: 8, 75: 8, 72: 6, 73: 6, 65: 4, 66: 4, 79: 3, 80: 3}), 'PASS': Counter({49: 2, 50: 2, 53: 1, 54: 1, 55: 1, 57: 1, 58: 1, 60: 1, 61: 1, 62: 1, 63: 1, 70: 1, 77: 1, 59: 1, 64: 1, 68: 1, 65: 1, 66: 1, 78: 1, 56: 1, 79: 1, 80: 1, 51: 1})})
71 {49: 0.5, 50: 0.5, 53: 0.6666666666666666, 54: 0.6666666666666666, 55: 0.6666666666666666, 57: 0.6666666666666666, 58: 0.6666666666666666, 60: 0.6666666666666666, 61: 0.6666666666666666, 62: 0.6666666666666666, 63: 0.6666666666666666, 70: 0.6666666666666666, 77: 0.6666666666666666, 59: 0.6666666666666666, 64: 0.6666666666666666, 68: 0.6666666666666666, 78: 0.6666666666666666, 56: 0.6666666666666666, 71: 1.0, 72: 1.0, 73: 1.0, 75: 1.0, 65: 0.5, 66: 0.5, 79: 0.42857142857142855, 80: 0.42857142857142855, 51: 0.0} ['53']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 64: 10, 74: 10, 62: 10, 66: 9, 67: 9, 68: 9, 58: 7, 59: 7, 75: 6, 76: 6, 71: 4, 72: 4})})
49 {49: 0, 50: 0, 51: 0, 52: 0, 53: 0, 54: 0, 56: 0, 58: 0, 59: 0, 64: 0, 71: 0, 72: 0, 74: 0, 62: 0, 66: 0, 67: 0, 68: 0, 75: 0, 76: 0} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_SUBSEQUENCE.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 52: 10, 53: 10, 54: 10, 50: 6, 55: 3, 56: 3})})
45 {45: 0, 46: 0, 47: 0, 48: 0, 49: 0, 52: 0, 53: 0, 54: 0, 55: 0, 56: 0, 50: 0} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({46: 4, 47: 4, 48: 4, 49: 4, 50: 4, 51: 4, 56: 4, 61: 4, 62: 4, 52: 3, 53: 3, 54: 3, 55: 3, 57: 3, 58: 3, 59: 3}), 'PASS': Counter({46: 6, 47: 6, 48: 6, 49: 6, 50: 6, 51: 6, 52: 6, 53: 6, 54: 6, 55: 6, 61: 6, 56: 6, 57: 6, 58: 6, 59: 6, 62: 6})})
46 {46: 0.5, 47: 0.5, 48: 0.5, 49: 0.5, 50: 0.5, 51: 0.5, 56: 0.5, 61: 0.5, 62: 0.5, 52: 0.42857142857142855, 53: 0.42857142857142855, 54: 0.42857142857142855, 55: 0.42857142857142855, 57: 0.42857142857142855, 58: 0.42857142857142855, 59: 0.42857142857142855} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LENGTH_LONGEST_BALANCED_SUBSEQUENCE.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LENGTH_LONGEST_BALANCED_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 50: 10, 52: 10, 53: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 54: 10, 60: 9, 51: 9, 61: 2, 62: 2})})
45 {45: 0, 46: 0, 47: 0, 48: 0, 49: 0, 50: 0, 52: 0, 53: 0, 55: 0, 56: 0, 57: 0, 58: 0, 59: 0, 54: 0, 60: 0, 51: 0, 61: 0, 62: 0} ['45']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 50: 7, 51: 7, 4294967295: 1}), 'FAIL': Counter({40: 2, 41: 2, 42: 2, 43: 2, 44: 2, 46: 2, 47: 2, 48: 2, 50: 2, 51: 2})})
40 {40: 0.5333333333333333, 41: 0.5333333333333333, 42: 0.5333333333333333, 43: 0.5333333333333333, 44: 0.5333333333333333, 46: 0.5333333333333333, 47: 0.5333333333333333, 48: 0.5333333333333333, 50: 0.5333333333333333, 51: 0.5333333333333333, 4294967295: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_EQUAL_POINT_STRING_BRACKETS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_EQUAL_POINT_STRING_BRACKETS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 8, 55: 8, 56: 8, 57: 8, 58: 8, 59: 8, 60: 8, 61: 8, 62: 8, 63: 8, 65: 8, 67: 8, 64: 8, 68: 8, 69: 8, 71: 8, 73: 8, 70: 8, 74: 8, 75: 8, 80: 8, 66: 7, 72: 7, 76: 7, 77: 7, 78: 7, 79: 7}), 'PASS': Counter({54: 2, 55: 2, 56: 2, 57: 2, 58: 2, 59: 2, 60: 2, 61: 2, 62: 2, 63: 2, 65: 2, 66: 2, 67: 2, 64: 2, 68: 2, 69: 2, 71: 2, 73: 2, 70: 2, 72: 2, 74: 2, 75: 2, 76: 2, 77: 2, 78: 2, 79: 2, 80: 2})})
54 {54: 0.5, 55: 0.5, 56: 0.5, 57: 0.5, 58: 0.5, 59: 0.5, 60: 0.5, 61: 0.5, 62: 0.5, 63: 0.5, 65: 0.5, 67: 0.5, 64: 0.5, 66: 0.4666666666666667, 68: 0.5, 69: 0.5, 71: 0.5, 73: 0.5, 70: 0.5, 72: 0.4666666666666667, 74: 0.5, 75: 0.5, 76: 0.4666666666666667, 77: 0.4666666666666667, 78: 0.4666666666666667, 79: 0.4666666666666667, 80: 0.5} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 49: 7, 50: 7, 51: 7, 45: 7, 52: 7}), 'FAIL': Counter({40: 3, 41: 3, 42: 3, 43: 3, 44: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 45: 3, 52: 3})})
40 {40: 0.5, 41: 0.5, 42: 0.5, 43: 0.5, 44: 0.5, 46: 0.5, 47: 0.5, 48: 0.5, 49: 0.5, 50: 0.5, 51: 0.5, 45: 0.5, 52: 0.5} ['48']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({41: 8, 42: 8, 43: 8, 44: 8, 46: 4, 47: 4, 49: 4, 50: 4, 51: 4, 48: 4, 53: 4, 54: 4, 52: 2, 45: 2}), 'PASS': Counter({41: 2, 42: 2, 43: 2, 44: 2, 53: 2, 54: 2})})
46 {41: 0.5, 42: 0.5, 43: 0.5, 44: 0.5, 46: 1.0, 47: 1.0, 49: 1.0, 50: 1.0, 51: 1.0, 48: 1.0, 52: 1.0, 45: 1.0, 53: 0.3333333333333333, 54: 0.3333333333333333} ['41']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 60: 1, 61: 1}), 'FAIL': Counter({45: 9, 46: 9, 47: 9, 48: 9, 49: 9, 50: 9, 51: 9, 52: 9, 53: 9, 56: 9, 57: 9, 58: 9, 59: 9, 54: 5, 60: 3, 61: 3})})
50 {45: 0.5, 46: 0.5, 47: 0.5, 48: 0.5, 49: 0.5, 50: 1.0, 51: 1.0, 52: 1.0, 53: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 54: 1.0, 60: 0.25, 61: 0.25} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 52: 7, 53: 7, 64: 7, 65: 7, 73: 7, 54: 7, 55: 7, 66: 5, 67: 5, 56: 5, 57: 5, 69: 4, 59: 4, 62: 3}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 64: 3, 65: 3, 73: 3, 54: 3, 55: 3, 62: 3, 69: 2, 56: 2, 57: 2, 75: 2, 76: 2, 66: 1, 67: 1, 59: 1})})
66 {49: 0.5, 50: 0.5, 51: 0.5, 52: 0.5, 53: 0.5, 64: 0.5, 65: 0.5, 69: 0.4615384615384615, 66: 0.6818181818181818, 67: 0.6818181818181818, 73: 0.5, 54: 0.5, 55: 0.5, 59: 0.6315789473684211, 56: 0.5172413793103449, 57: 0.5172413793103449, 62: 0.3, 75: 0.0, 76: 0.0} ['49']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({44: 7, 45: 7, 46: 7, 47: 7, 48: 7, 49: 7, 55: 7, 50: 7, 51: 7, 52: 7, 53: 7, 54: 7, 56: 7, 57: 7}), 'PASS': Counter({44: 3, 45: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 54: 3, 55: 3, 56: 3, 57: 3})})
44 {44: 0.5, 45: 0.5, 46: 0.5, 47: 0.5, 48: 0.5, 49: 0.5, 55: 0.5, 50: 0.5, 51: 0.5, 52: 0.5, 53: 0.5, 54: 0.5, 56: 0.5, 57: 0.5} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 9, 41: 9, 42: 9, 43: 9, 45: 9, 46: 9, 48: 9, 47: 9}), 'PASS': Counter({40: 1, 41: 1, 42: 1, 43: 1, 45: 1, 46: 1, 50: 1, 44: 1})})
48 {40: 0.5, 41: 0.5, 42: 0.5, 43: 0.5, 45: 0.5, 46: 0.5, 48: 1.0, 47: 1.0, 50: 0.0, 44: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MULTIPLY_LARGE_NUMBERS_REPRESENTED_AS_STRINGS.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MULTIPLY_LARGE_NUMBERS_REPRESENTED_AS_STRINGS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 65: 10, 66: 10, 67: 10, 68: 10, 69: 10, 70: 10, 71: 10, 72: 10, 74: 10, 75: 10, 77: 2, 78: 2, 79: 2, 80: 2, 81: 2, 82: 2, 83: 2})})
57 {57: 0, 58: 0, 59: 0, 60: 0, 61: 0, 62: 0, 63: 0, 64: 0, 65: 0, 66: 0, 67: 0, 68: 0, 69: 0, 70: 0, 71: 0, 72: 0, 74: 0, 75: 0, 77: 0, 78: 0, 79: 0, 80: 0, 81: 0, 82: 0, 83: 0} ['81']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N.cpp
/Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 10, 44: 10, 45: 10, 46: 10, 47: 9, 48: 9, 49: 9, 50: 9, 52: 6, 53: 3, 54: 3})})
43 {43: 0, 44: 0, 45: 0, 46: 0, 47: 0, 48: 0, 49: 0, 50: 0, 52: 0, 53: 0, 54: 0} ['44']
Got it right 6 times.
Testing ochiai
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({51: 10, 52: 10, 53: 10, 55: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 62: 10, 63: 10, 65: 10, 64: 10, 66: 10, 61: 10}), 'PASS': Counter()})
51 {51: 1.0, 52: 1.0, 53: 1.0, 55: 1.0, 54: 1.0, 56: 1.0, 57: 1.0, 59: 1.0, 60: 1.0, 62: 1.0, 63: 1.0, 65: 1.0, 64: 1.0, 66: 1.0, 61: 1.0} ['51']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/EULERIAN_NUMBER_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 9, 43: 9, 44: 9, 46: 9, 47: 9, 49: 9, 50: 9, 52: 9, 53: 9, 48: 9, 54: 5, 45: 5, 51: 4}), 'PASS': Counter({42: 1, 43: 1, 44: 1, 46: 1, 47: 1, 49: 1, 50: 1, 52: 1, 53: 1, 48: 1})})
42 {42: 0.9486832980505138, 43: 0.9486832980505138, 44: 0.9486832980505138, 46: 0.9486832980505138, 47: 0.9486832980505138, 49: 0.9486832980505138, 50: 0.9486832980505138, 52: 0.9486832980505138, 53: 0.9486832980505138, 48: 0.9486832980505138, 54: 0.5270462766947299, 45: 0.5270462766947299, 51: 0.4216370213557839} ['42']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ABSOLUTE_DIFFERENCE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 9, 44: 9, 45: 9, 46: 9, 47: 9, 49: 9, 50: 9, 51: 9, 53: 9, 54: 9, 55: 9}), 'PASS': Counter({43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 49: 1, 50: 1, 51: 1, 53: 1, 54: 1, 55: 1})})
43 {43: 0.9486832980505138, 44: 0.9486832980505138, 45: 0.9486832980505138, 46: 0.9486832980505138, 47: 0.9486832980505138, 49: 0.9486832980505138, 50: 0.9486832980505138, 51: 0.9486832980505138, 53: 0.9486832980505138, 54: 0.9486832980505138, 55: 0.9486832980505138} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DICE_THROW_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 10, 47: 10, 46: 10, 48: 1}), 'PASS': Counter()})
40 {40: 1.0, 41: 1.0, 42: 1.0, 43: 1.0, 44: 1.0, 45: 1.0, 47: 1.0, 46: 1.0, 48: 0.1} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 9, 56: 9, 57: 9, 58: 9, 59: 9, 60: 9, 61: 9, 62: 9, 65: 9, 66: 9, 67: 9, 63: 4, 64: 4, 68: 3, 69: 3, 70: 3, 71: 3, 72: 3, 73: 3, 74: 3}), 'PASS': Counter({55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 68: 1, 69: 1, 73: 1, 74: 1})})
55 {55: 0.9486832980505138, 56: 0.9486832980505138, 57: 0.9486832980505138, 58: 0.9486832980505138, 59: 0.9486832980505138, 60: 0.9486832980505138, 61: 0.9486832980505138, 62: 0.9486832980505138, 65: 0.9486832980505138, 66: 0.9486832980505138, 67: 0.9486832980505138, 68: 0.31622776601683794, 69: 0.31622776601683794, 70: 0.31622776601683794, 71: 0.31622776601683794, 72: 0.31622776601683794, 73: 0.31622776601683794, 74: 0.31622776601683794, 63: 0.4216370213557839, 64: 0.4216370213557839} ['56', '57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME_WITH_PERMUTATIONS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({37: 10, 38: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10}), 'PASS': Counter()})
37 {37: 1.0, 38: 1.0, 40: 1.0, 41: 1.0, 42: 1.0, 43: 1.0, 44: 1.0} ['39']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({38: 10, 39: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 3, 46: 3}), 'PASS': Counter()})
38 {38: 1.0, 39: 1.0, 40: 1.0, 41: 1.0, 42: 1.0, 43: 1.0, 44: 1.0, 45: 0.3, 46: 0.3} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 66: 5, 58: 5, 65: 1}), 'PASS': Counter()})
49 {49: 1.0, 50: 1.0, 51: 1.0, 52: 1.0, 53: 1.0, 54: 1.0, 56: 1.0, 57: 1.0, 59: 1.0, 60: 1.0, 61: 1.0, 62: 1.0, 63: 1.0, 64: 1.0, 66: 0.5, 58: 0.5, 65: 0.1} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 7, 55: 7, 56: 7, 58: 7, 57: 7, 59: 5, 60: 5, 61: 5, 63: 5, 62: 5, 64: 3, 65: 3, 66: 3, 69: 3, 70: 3, 72: 3, 73: 3, 74: 3, 75: 3, 78: 2, 67: 2, 76: 1, 81: 1}), 'PASS': Counter({54: 3, 55: 3, 56: 3, 58: 3, 57: 3, 59: 3, 60: 3, 61: 3, 63: 3, 62: 3, 64: 2, 65: 2, 66: 2, 69: 2, 70: 2, 72: 2, 73: 2, 74: 2, 75: 2, 78: 2, 67: 2, 80: 2, 81: 2})})
54 {54: 0.8366600265340756, 55: 0.8366600265340756, 56: 0.8366600265340756, 58: 0.8366600265340756, 57: 0.8366600265340756, 59: 0.5976143046671968, 60: 0.5976143046671968, 61: 0.5976143046671968, 63: 0.5976143046671968, 62: 0.5976143046671968, 64: 0.35856858280031806, 65: 0.35856858280031806, 66: 0.35856858280031806, 69: 0.35856858280031806, 70: 0.35856858280031806, 72: 0.35856858280031806, 73: 0.35856858280031806, 74: 0.35856858280031806, 75: 0.35856858280031806, 78: 0.23904572186687872, 67: 0.23904572186687872, 76: 0.11952286093343936, 81: 0.11952286093343936, 80: 0.0} ['59']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 53: 7, 52: 7, 54: 6, 55: 5, 56: 5, 58: 5, 59: 5, 67: 5, 57: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 60: 4}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 53: 3, 52: 3, 54: 3, 55: 3, 56: 3, 58: 3, 59: 3, 67: 3, 57: 3, 61: 1, 62: 1, 63: 1, 65: 1, 66: 1, 60: 1})})
49 {49: 0.8366600265340756, 50: 0.8366600265340756, 51: 0.8366600265340756, 53: 0.8366600265340756, 52: 0.8366600265340756, 54: 0.7171371656006361, 55: 0.5976143046671968, 56: 0.5976143046671968, 58: 0.5976143046671968, 59: 0.5976143046671968, 61: 0.47809144373375745, 62: 0.47809144373375745, 63: 0.47809144373375745, 64: 0.47809144373375745, 65: 0.47809144373375745, 66: 0.47809144373375745, 60: 0.47809144373375745, 67: 0.5976143046671968, 57: 0.5976143046671968} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROME_SUB_STRINGS_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 64: 10, 61: 7, 62: 7, 65: 7, 66: 7, 67: 7, 68: 7, 70: 7, 74: 7, 73: 6, 71: 5, 75: 4, 69: 2, 76: 1, 77: 1}), 'PASS': Counter()})
55 {55: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 60: 1.0, 61: 0.7, 62: 0.7, 64: 1.0, 65: 0.7, 66: 0.7, 67: 0.7, 68: 0.7, 70: 0.7, 73: 0.6, 74: 0.7, 75: 0.4, 71: 0.5, 69: 0.2, 76: 0.1, 77: 0.1} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_AND_NON_OVERLAPPING_SUBSTRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 71: 4, 76: 4, 77: 4, 61: 3, 62: 3, 66: 3, 63: 2, 64: 2, 65: 2, 72: 1, 73: 1, 74: 1, 75: 1}), 'PASS': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 71: 1, 76: 1, 77: 1})})
53 {53: 0.7071067811865475, 54: 0.7071067811865475, 55: 0.7071067811865475, 56: 0.7071067811865475, 57: 0.7071067811865475, 58: 0.7071067811865475, 59: 0.7071067811865475, 60: 0.7071067811865475, 67: 0.7071067811865475, 69: 0.7071067811865475, 70: 0.7071067811865475, 71: 0.565685424949238, 76: 0.565685424949238, 77: 0.565685424949238, 61: 0.4242640687119285, 62: 0.4242640687119285, 66: 0.4242640687119285, 63: 0.282842712474619, 64: 0.282842712474619, 65: 0.282842712474619, 72: 0.1414213562373095, 73: 0.1414213562373095, 74: 0.1414213562373095, 75: 0.1414213562373095} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 4, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 1}), 'PASS': Counter({43: 6, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 4, 54: 3, 55: 3})})
43 {43: 0.6324555320336759, 44: 0.6324555320336759, 45: 0.6324555320336759, 46: 0.6324555320336759, 47: 0.6324555320336759, 51: 0.6324555320336759, 53: 0.15811388300841897, 54: 0.0, 55: 0.0} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({59: 7, 60: 7, 61: 7, 62: 7, 63: 7, 64: 7, 68: 7, 69: 7, 71: 7, 74: 7, 75: 7, 76: 7, 77: 7, 82: 7, 92: 7, 93: 7, 83: 7, 87: 7, 91: 7, 95: 7, 96: 7, 97: 7, 98: 7, 99: 7, 65: 6, 66: 6, 67: 6, 88: 6, 89: 6, 78: 5, 81: 5, 79: 1}), 'PASS': Counter({59: 3, 60: 3, 61: 3, 62: 3, 63: 3, 64: 3, 65: 3, 66: 3, 67: 3, 68: 3, 69: 3, 71: 3, 99: 3, 72: 2, 74: 1, 75: 1, 76: 1, 77: 1, 82: 1, 83: 1, 87: 1, 88: 1, 89: 1, 91: 1, 92: 1, 93: 1, 95: 1, 96: 1, 97: 1, 98: 1})})
59 {59: 0.8366600265340756, 60: 0.8366600265340756, 61: 0.8366600265340756, 62: 0.8366600265340756, 63: 0.8366600265340756, 64: 0.8366600265340756, 68: 0.8366600265340756, 69: 0.8366600265340756, 65: 0.7171371656006361, 66: 0.7171371656006361, 67: 0.7171371656006361, 71: 0.8366600265340756, 74: 0.8366600265340756, 75: 0.8366600265340756, 76: 0.8366600265340756, 77: 0.8366600265340756, 82: 0.8366600265340756, 92: 0.8366600265340756, 93: 0.8366600265340756, 83: 0.8366600265340756, 87: 0.8366600265340756, 88: 0.7171371656006361, 89: 0.7171371656006361, 91: 0.8366600265340756, 78: 0.5976143046671968, 79: 0.11952286093343936, 81: 0.5976143046671968, 95: 0.8366600265340756, 96: 0.8366600265340756, 97: 0.8366600265340756, 98: 0.8366600265340756, 99: 0.8366600265340756, 72: 0.0} ['97']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 10, 54: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 68: 10, 69: 10, 63: 10, 64: 4, 65: 4, 66: 4, 70: 1, 71: 1}), 'PASS': Counter()})
53 {53: 1.0, 54: 1.0, 55: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 60: 1.0, 61: 1.0, 68: 1.0, 69: 1.0, 63: 1.0, 64: 0.4, 65: 0.4, 66: 0.4, 70: 0.1, 71: 0.1} ['57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/UNBOUNDED_KNAPSACK_REPETITION_ITEMS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({36: 9, 37: 9, 38: 9, 39: 9, 42: 9, 43: 9, 40: 5, 44: 2, 45: 2}), 'PASS': Counter({36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 42: 1, 43: 1})})
36 {36: 0.9486832980505138, 37: 0.9486832980505138, 38: 0.9486832980505138, 39: 0.9486832980505138, 42: 0.9486832980505138, 43: 0.9486832980505138, 44: 0.21081851067789195, 45: 0.21081851067789195, 40: 0.5270462766947299} ['36']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 10, 43: 10, 44: 10, 45: 10, 46: 10, 47: 10, 48: 10, 50: 10}), 'PASS': Counter()})
42 {42: 1.0, 43: 1.0, 44: 1.0, 45: 1.0, 46: 1.0, 47: 1.0, 48: 1.0, 50: 1.0} ['43']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 8, 50: 8, 53: 8, 54: 8, 55: 8, 57: 8, 58: 8, 60: 8, 61: 8, 62: 8, 63: 8, 70: 8, 77: 8, 59: 8, 64: 8, 68: 8, 78: 8, 56: 8, 71: 8, 75: 8, 72: 6, 73: 6, 65: 4, 66: 4, 79: 3, 80: 3}), 'PASS': Counter({49: 2, 50: 2, 53: 1, 54: 1, 55: 1, 57: 1, 58: 1, 60: 1, 61: 1, 62: 1, 63: 1, 70: 1, 77: 1, 59: 1, 64: 1, 68: 1, 65: 1, 66: 1, 78: 1, 56: 1, 79: 1, 80: 1, 51: 1})})
49 {49: 0.8944271909999159, 50: 0.8944271909999159, 53: 0.8944271909999159, 54: 0.8944271909999159, 55: 0.8944271909999159, 57: 0.8944271909999159, 58: 0.8944271909999159, 60: 0.8944271909999159, 61: 0.8944271909999159, 62: 0.8944271909999159, 63: 0.8944271909999159, 70: 0.8944271909999159, 77: 0.8944271909999159, 59: 0.8944271909999159, 64: 0.8944271909999159, 68: 0.8944271909999159, 78: 0.8944271909999159, 56: 0.8944271909999159, 71: 0.8944271909999159, 72: 0.6708203932499369, 73: 0.6708203932499369, 75: 0.8944271909999159, 65: 0.4472135954999579, 66: 0.4472135954999579, 79: 0.33541019662496846, 80: 0.33541019662496846, 51: 0.0} ['53']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 64: 10, 74: 10, 62: 10, 66: 9, 67: 9, 68: 9, 58: 7, 59: 7, 75: 6, 76: 6, 71: 4, 72: 4}), 'PASS': Counter()})
49 {49: 1.0, 50: 1.0, 51: 1.0, 52: 1.0, 53: 1.0, 54: 1.0, 56: 1.0, 58: 0.7, 59: 0.7, 64: 1.0, 71: 0.4, 72: 0.4, 74: 1.0, 62: 1.0, 66: 0.9, 67: 0.9, 68: 0.9, 75: 0.6, 76: 0.6} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 52: 10, 53: 10, 54: 10, 50: 6, 55: 3, 56: 3}), 'PASS': Counter()})
45 {45: 1.0, 46: 1.0, 47: 1.0, 48: 1.0, 49: 1.0, 52: 1.0, 53: 1.0, 54: 1.0, 55: 0.3, 56: 0.3, 50: 0.6} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({46: 4, 47: 4, 48: 4, 49: 4, 50: 4, 51: 4, 56: 4, 61: 4, 62: 4, 52: 3, 53: 3, 54: 3, 55: 3, 57: 3, 58: 3, 59: 3}), 'PASS': Counter({46: 6, 47: 6, 48: 6, 49: 6, 50: 6, 51: 6, 52: 6, 53: 6, 54: 6, 55: 6, 61: 6, 56: 6, 57: 6, 58: 6, 59: 6, 62: 6})})
46 {46: 0.6324555320336759, 47: 0.6324555320336759, 48: 0.6324555320336759, 49: 0.6324555320336759, 50: 0.6324555320336759, 51: 0.6324555320336759, 56: 0.6324555320336759, 61: 0.6324555320336759, 62: 0.6324555320336759, 52: 0.4743416490252569, 53: 0.4743416490252569, 54: 0.4743416490252569, 55: 0.4743416490252569, 57: 0.4743416490252569, 58: 0.4743416490252569, 59: 0.4743416490252569} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LENGTH_LONGEST_BALANCED_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 50: 10, 52: 10, 53: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 54: 10, 60: 9, 51: 9, 61: 2, 62: 2}), 'PASS': Counter()})
45 {45: 1.0, 46: 1.0, 47: 1.0, 48: 1.0, 49: 1.0, 50: 1.0, 52: 1.0, 53: 1.0, 55: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 54: 1.0, 60: 0.9, 51: 0.9, 61: 0.2, 62: 0.2} ['45']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 50: 7, 51: 7, 4294967295: 1}), 'FAIL': Counter({40: 2, 41: 2, 42: 2, 43: 2, 44: 2, 46: 2, 47: 2, 48: 2, 50: 2, 51: 2})})
40 {40: 0.4472135954999579, 41: 0.4472135954999579, 42: 0.4472135954999579, 43: 0.4472135954999579, 44: 0.4472135954999579, 46: 0.4472135954999579, 47: 0.4472135954999579, 48: 0.4472135954999579, 50: 0.4472135954999579, 51: 0.4472135954999579, 4294967295: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_EQUAL_POINT_STRING_BRACKETS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 8, 55: 8, 56: 8, 57: 8, 58: 8, 59: 8, 60: 8, 61: 8, 62: 8, 63: 8, 65: 8, 67: 8, 64: 8, 68: 8, 69: 8, 71: 8, 73: 8, 70: 8, 74: 8, 75: 8, 80: 8, 66: 7, 72: 7, 76: 7, 77: 7, 78: 7, 79: 7}), 'PASS': Counter({54: 2, 55: 2, 56: 2, 57: 2, 58: 2, 59: 2, 60: 2, 61: 2, 62: 2, 63: 2, 65: 2, 66: 2, 67: 2, 64: 2, 68: 2, 69: 2, 71: 2, 73: 2, 70: 2, 72: 2, 74: 2, 75: 2, 76: 2, 77: 2, 78: 2, 79: 2, 80: 2})})
54 {54: 0.8944271909999159, 55: 0.8944271909999159, 56: 0.8944271909999159, 57: 0.8944271909999159, 58: 0.8944271909999159, 59: 0.8944271909999159, 60: 0.8944271909999159, 61: 0.8944271909999159, 62: 0.8944271909999159, 63: 0.8944271909999159, 65: 0.8944271909999159, 67: 0.8944271909999159, 64: 0.8944271909999159, 66: 0.7826237921249264, 68: 0.8944271909999159, 69: 0.8944271909999159, 71: 0.8944271909999159, 73: 0.8944271909999159, 70: 0.8944271909999159, 72: 0.7826237921249264, 74: 0.8944271909999159, 75: 0.8944271909999159, 76: 0.7826237921249264, 77: 0.7826237921249264, 78: 0.7826237921249264, 79: 0.7826237921249264, 80: 0.8944271909999159} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 49: 7, 50: 7, 51: 7, 45: 7, 52: 7}), 'FAIL': Counter({40: 3, 41: 3, 42: 3, 43: 3, 44: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 45: 3, 52: 3})})
40 {40: 0.5477225575051661, 41: 0.5477225575051661, 42: 0.5477225575051661, 43: 0.5477225575051661, 44: 0.5477225575051661, 46: 0.5477225575051661, 47: 0.5477225575051661, 48: 0.5477225575051661, 49: 0.5477225575051661, 50: 0.5477225575051661, 51: 0.5477225575051661, 45: 0.5477225575051661, 52: 0.5477225575051661} ['48']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({41: 8, 42: 8, 43: 8, 44: 8, 46: 4, 47: 4, 49: 4, 50: 4, 51: 4, 48: 4, 53: 4, 54: 4, 52: 2, 45: 2}), 'PASS': Counter({41: 2, 42: 2, 43: 2, 44: 2, 53: 2, 54: 2})})
41 {41: 0.8944271909999159, 42: 0.8944271909999159, 43: 0.8944271909999159, 44: 0.8944271909999159, 46: 0.4472135954999579, 47: 0.4472135954999579, 49: 0.4472135954999579, 50: 0.4472135954999579, 51: 0.4472135954999579, 48: 0.4472135954999579, 52: 0.22360679774997896, 45: 0.22360679774997896, 53: 0.4472135954999579, 54: 0.4472135954999579} ['41']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 60: 1, 61: 1}), 'FAIL': Counter({45: 9, 46: 9, 47: 9, 48: 9, 49: 9, 50: 9, 51: 9, 52: 9, 53: 9, 56: 9, 57: 9, 58: 9, 59: 9, 54: 5, 60: 3, 61: 3})})
45 {45: 0.9486832980505138, 46: 0.9486832980505138, 47: 0.9486832980505138, 48: 0.9486832980505138, 49: 0.9486832980505138, 50: 0.9486832980505138, 51: 0.9486832980505138, 52: 0.9486832980505138, 53: 0.9486832980505138, 56: 0.9486832980505138, 57: 0.9486832980505138, 58: 0.9486832980505138, 59: 0.9486832980505138, 54: 0.5270462766947299, 60: 0.31622776601683794, 61: 0.31622776601683794} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 52: 7, 53: 7, 64: 7, 65: 7, 73: 7, 54: 7, 55: 7, 66: 5, 67: 5, 56: 5, 57: 5, 69: 4, 59: 4, 62: 3}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 64: 3, 65: 3, 73: 3, 54: 3, 55: 3, 62: 3, 69: 2, 56: 2, 57: 2, 75: 2, 76: 2, 66: 1, 67: 1, 59: 1})})
49 {49: 0.8366600265340756, 50: 0.8366600265340756, 51: 0.8366600265340756, 52: 0.8366600265340756, 53: 0.8366600265340756, 64: 0.8366600265340756, 65: 0.8366600265340756, 69: 0.47809144373375745, 66: 0.5976143046671968, 67: 0.5976143046671968, 73: 0.8366600265340756, 54: 0.8366600265340756, 55: 0.8366600265340756, 59: 0.47809144373375745, 56: 0.5976143046671968, 57: 0.5976143046671968, 62: 0.35856858280031806, 75: 0.0, 76: 0.0} ['49']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({44: 7, 45: 7, 46: 7, 47: 7, 48: 7, 49: 7, 55: 7, 50: 7, 51: 7, 52: 7, 53: 7, 54: 7, 56: 7, 57: 7}), 'PASS': Counter({44: 3, 45: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 54: 3, 55: 3, 56: 3, 57: 3})})
44 {44: 0.8366600265340756, 45: 0.8366600265340756, 46: 0.8366600265340756, 47: 0.8366600265340756, 48: 0.8366600265340756, 49: 0.8366600265340756, 55: 0.8366600265340756, 50: 0.8366600265340756, 51: 0.8366600265340756, 52: 0.8366600265340756, 53: 0.8366600265340756, 54: 0.8366600265340756, 56: 0.8366600265340756, 57: 0.8366600265340756} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 9, 41: 9, 42: 9, 43: 9, 45: 9, 46: 9, 48: 9, 47: 9}), 'PASS': Counter({40: 1, 41: 1, 42: 1, 43: 1, 45: 1, 46: 1, 50: 1, 44: 1})})
40 {40: 0.9486832980505138, 41: 0.9486832980505138, 42: 0.9486832980505138, 43: 0.9486832980505138, 45: 0.9486832980505138, 46: 0.9486832980505138, 48: 0.9486832980505138, 47: 0.9486832980505138, 50: 0.0, 44: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MULTIPLY_LARGE_NUMBERS_REPRESENTED_AS_STRINGS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 65: 10, 66: 10, 67: 10, 68: 10, 69: 10, 70: 10, 71: 10, 72: 10, 74: 10, 75: 10, 77: 2, 78: 2, 79: 2, 80: 2, 81: 2, 82: 2, 83: 2}), 'PASS': Counter()})
57 {57: 1.0, 58: 1.0, 59: 1.0, 60: 1.0, 61: 1.0, 62: 1.0, 63: 1.0, 64: 1.0, 65: 1.0, 66: 1.0, 67: 1.0, 68: 1.0, 69: 1.0, 70: 1.0, 71: 1.0, 72: 1.0, 74: 1.0, 75: 1.0, 77: 0.2, 78: 0.2, 79: 0.2, 80: 0.2, 81: 0.2, 82: 0.2, 83: 0.2} ['81']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 10, 44: 10, 45: 10, 46: 10, 47: 9, 48: 9, 49: 9, 50: 9, 52: 6, 53: 3, 54: 3}), 'PASS': Counter()})
43 {43: 1.0, 44: 1.0, 45: 1.0, 46: 1.0, 47: 0.9, 48: 0.9, 49: 0.9, 50: 0.9, 52: 0.6, 53: 0.3, 54: 0.3} ['44']
Got it right 11 times.
Testing op2
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({51: 10, 52: 10, 53: 10, 55: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 62: 10, 63: 10, 65: 10, 64: 10, 66: 10, 61: 10}), 'PASS': Counter()})
51 {51: 10.0, 52: 10.0, 53: 10.0, 55: 10.0, 54: 10.0, 56: 10.0, 57: 10.0, 59: 10.0, 60: 10.0, 62: 10.0, 63: 10.0, 65: 10.0, 64: 10.0, 66: 10.0, 61: 10.0} ['51']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/EULERIAN_NUMBER_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 9, 43: 9, 44: 9, 46: 9, 47: 9, 49: 9, 50: 9, 52: 9, 53: 9, 48: 9, 54: 5, 45: 5, 51: 4}), 'PASS': Counter({42: 1, 43: 1, 44: 1, 46: 1, 47: 1, 49: 1, 50: 1, 52: 1, 53: 1, 48: 1})})
42 {42: 8.5, 43: 8.5, 44: 8.5, 46: 8.5, 47: 8.5, 49: 8.5, 50: 8.5, 52: 8.5, 53: 8.5, 48: 8.5, 54: 5.0, 45: 5.0, 51: 4.0} ['42']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ABSOLUTE_DIFFERENCE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 9, 44: 9, 45: 9, 46: 9, 47: 9, 49: 9, 50: 9, 51: 9, 53: 9, 54: 9, 55: 9}), 'PASS': Counter({43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 49: 1, 50: 1, 51: 1, 53: 1, 54: 1, 55: 1})})
43 {43: 8.5, 44: 8.5, 45: 8.5, 46: 8.5, 47: 8.5, 49: 8.5, 50: 8.5, 51: 8.5, 53: 8.5, 54: 8.5, 55: 8.5} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DICE_THROW_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 10, 47: 10, 46: 10, 48: 1}), 'PASS': Counter()})
40 {40: 10.0, 41: 10.0, 42: 10.0, 43: 10.0, 44: 10.0, 45: 10.0, 47: 10.0, 46: 10.0, 48: 1.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 9, 56: 9, 57: 9, 58: 9, 59: 9, 60: 9, 61: 9, 62: 9, 65: 9, 66: 9, 67: 9, 63: 4, 64: 4, 68: 3, 69: 3, 70: 3, 71: 3, 72: 3, 73: 3, 74: 3}), 'PASS': Counter({55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 68: 1, 69: 1, 73: 1, 74: 1})})
61 {55: 8.5, 56: 8.5, 57: 8.5, 58: 8.5, 59: 8.5, 60: 8.5, 61: 9.0, 62: 9.0, 65: 9.0, 66: 9.0, 67: 9.0, 68: 2.5, 69: 2.5, 70: 3.0, 71: 3.0, 72: 3.0, 73: 2.5, 74: 2.5, 63: 4.0, 64: 4.0} ['56', '57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME_WITH_PERMUTATIONS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({37: 10, 38: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10}), 'PASS': Counter()})
37 {37: 10.0, 38: 10.0, 40: 10.0, 41: 10.0, 42: 10.0, 43: 10.0, 44: 10.0} ['39']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({38: 10, 39: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 3, 46: 3}), 'PASS': Counter()})
38 {38: 10.0, 39: 10.0, 40: 10.0, 41: 10.0, 42: 10.0, 43: 10.0, 44: 10.0, 45: 3.0, 46: 3.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 66: 5, 58: 5, 65: 1}), 'PASS': Counter()})
49 {49: 10.0, 50: 10.0, 51: 10.0, 52: 10.0, 53: 10.0, 54: 10.0, 56: 10.0, 57: 10.0, 59: 10.0, 60: 10.0, 61: 10.0, 62: 10.0, 63: 10.0, 64: 10.0, 66: 5.0, 58: 5.0, 65: 1.0} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 7, 55: 7, 56: 7, 58: 7, 57: 7, 59: 5, 60: 5, 61: 5, 63: 5, 62: 5, 64: 3, 65: 3, 66: 3, 69: 3, 70: 3, 72: 3, 73: 3, 74: 3, 75: 3, 78: 2, 67: 2, 76: 1, 81: 1}), 'PASS': Counter({54: 3, 55: 3, 56: 3, 58: 3, 57: 3, 59: 3, 60: 3, 61: 3, 63: 3, 62: 3, 64: 2, 65: 2, 66: 2, 69: 2, 70: 2, 72: 2, 73: 2, 74: 2, 75: 2, 78: 2, 67: 2, 80: 2, 81: 2})})
54 {54: 6.25, 55: 6.25, 56: 6.25, 58: 6.25, 57: 6.25, 59: 4.25, 60: 4.25, 61: 4.25, 63: 4.25, 62: 4.25, 64: 2.5, 65: 2.5, 66: 2.5, 69: 2.5, 70: 2.5, 72: 2.5, 73: 2.5, 74: 2.5, 75: 2.5, 78: 1.5, 67: 1.5, 76: 1.0, 81: 0.5, 80: -0.5} ['59']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 53: 7, 52: 7, 54: 6, 55: 5, 56: 5, 58: 5, 59: 5, 67: 5, 57: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 60: 4}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 53: 3, 52: 3, 54: 3, 55: 3, 56: 3, 58: 3, 59: 3, 67: 3, 57: 3, 61: 1, 62: 1, 63: 1, 65: 1, 66: 1, 60: 1})})
49 {49: 6.25, 50: 6.25, 51: 6.25, 53: 6.25, 52: 6.25, 54: 5.25, 55: 4.25, 56: 4.25, 58: 4.25, 59: 4.25, 61: 3.75, 62: 3.75, 63: 3.75, 64: 4.0, 65: 3.75, 66: 3.75, 60: 3.75, 67: 4.25, 57: 4.25} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROME_SUB_STRINGS_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 64: 10, 61: 7, 62: 7, 65: 7, 66: 7, 67: 7, 68: 7, 70: 7, 74: 7, 73: 6, 71: 5, 75: 4, 69: 2, 76: 1, 77: 1}), 'PASS': Counter()})
55 {55: 10.0, 56: 10.0, 57: 10.0, 58: 10.0, 59: 10.0, 60: 10.0, 61: 7.0, 62: 7.0, 64: 10.0, 65: 7.0, 66: 7.0, 67: 7.0, 68: 7.0, 70: 7.0, 73: 6.0, 74: 7.0, 75: 4.0, 71: 5.0, 69: 2.0, 76: 1.0, 77: 1.0} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_AND_NON_OVERLAPPING_SUBSTRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 71: 4, 76: 4, 77: 4, 61: 3, 62: 3, 66: 3, 63: 2, 64: 2, 65: 2, 72: 1, 73: 1, 74: 1, 75: 1}), 'PASS': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 71: 1, 76: 1, 77: 1})})
53 {53: 4.166666666666667, 54: 4.166666666666667, 55: 4.166666666666667, 56: 4.166666666666667, 57: 4.166666666666667, 58: 4.166666666666667, 59: 4.166666666666667, 60: 4.166666666666667, 67: 4.166666666666667, 69: 4.166666666666667, 70: 4.166666666666667, 71: 3.8333333333333335, 76: 3.8333333333333335, 77: 3.8333333333333335, 61: 2.3333333333333335, 62: 2.3333333333333335, 66: 2.3333333333333335, 63: 1.3333333333333335, 64: 1.3333333333333335, 65: 1.3333333333333335, 72: 1.0, 73: 1.0, 74: 1.0, 75: 1.0} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 4, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 1}), 'PASS': Counter({43: 6, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 4, 54: 3, 55: 3})})
44 {43: 3.142857142857143, 44: 3.428571428571429, 45: 3.428571428571429, 46: 3.428571428571429, 47: 3.428571428571429, 51: 3.428571428571429, 53: 0.4285714285714286, 54: -0.42857142857142855, 55: -0.42857142857142855} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({59: 7, 60: 7, 61: 7, 62: 7, 63: 7, 64: 7, 68: 7, 69: 7, 71: 7, 74: 7, 75: 7, 76: 7, 77: 7, 82: 7, 92: 7, 93: 7, 83: 7, 87: 7, 91: 7, 95: 7, 96: 7, 97: 7, 98: 7, 99: 7, 65: 6, 66: 6, 67: 6, 88: 6, 89: 6, 78: 5, 81: 5, 79: 1}), 'PASS': Counter({59: 3, 60: 3, 61: 3, 62: 3, 63: 3, 64: 3, 65: 3, 66: 3, 67: 3, 68: 3, 69: 3, 71: 3, 99: 3, 72: 2, 74: 1, 75: 1, 76: 1, 77: 1, 82: 1, 83: 1, 87: 1, 88: 1, 89: 1, 91: 1, 92: 1, 93: 1, 95: 1, 96: 1, 97: 1, 98: 1})})
74 {59: 6.25, 60: 6.25, 61: 6.25, 62: 6.25, 63: 6.25, 64: 6.25, 68: 6.25, 69: 6.25, 65: 5.25, 66: 5.25, 67: 5.25, 71: 6.25, 74: 6.75, 75: 6.75, 76: 6.75, 77: 6.75, 82: 6.75, 92: 6.75, 93: 6.75, 83: 6.75, 87: 6.75, 88: 5.75, 89: 5.75, 91: 6.75, 78: 5.0, 79: 1.0, 81: 5.0, 95: 6.75, 96: 6.75, 97: 6.75, 98: 6.75, 99: 6.25, 72: -0.5} ['97']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 10, 54: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 68: 10, 69: 10, 63: 10, 64: 4, 65: 4, 66: 4, 70: 1, 71: 1}), 'PASS': Counter()})
53 {53: 10.0, 54: 10.0, 55: 10.0, 56: 10.0, 57: 10.0, 58: 10.0, 59: 10.0, 60: 10.0, 61: 10.0, 68: 10.0, 69: 10.0, 63: 10.0, 64: 4.0, 65: 4.0, 66: 4.0, 70: 1.0, 71: 1.0} ['57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/UNBOUNDED_KNAPSACK_REPETITION_ITEMS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({36: 9, 37: 9, 38: 9, 39: 9, 42: 9, 43: 9, 40: 5, 44: 2, 45: 2}), 'PASS': Counter({36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 42: 1, 43: 1})})
36 {36: 8.5, 37: 8.5, 38: 8.5, 39: 8.5, 42: 8.5, 43: 8.5, 44: 2.0, 45: 2.0, 40: 4.5} ['36']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 10, 43: 10, 44: 10, 45: 10, 46: 10, 47: 10, 48: 10, 50: 10}), 'PASS': Counter()})
42 {42: 10.0, 43: 10.0, 44: 10.0, 45: 10.0, 46: 10.0, 47: 10.0, 48: 10.0, 50: 10.0} ['43']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 8, 50: 8, 53: 8, 54: 8, 55: 8, 57: 8, 58: 8, 60: 8, 61: 8, 62: 8, 63: 8, 70: 8, 77: 8, 59: 8, 64: 8, 68: 8, 78: 8, 56: 8, 71: 8, 75: 8, 72: 6, 73: 6, 65: 4, 66: 4, 79: 3, 80: 3}), 'PASS': Counter({49: 2, 50: 2, 53: 1, 54: 1, 55: 1, 57: 1, 58: 1, 60: 1, 61: 1, 62: 1, 63: 1, 70: 1, 77: 1, 59: 1, 64: 1, 68: 1, 65: 1, 66: 1, 78: 1, 56: 1, 79: 1, 80: 1, 51: 1})})
71 {49: 7.333333333333333, 50: 7.333333333333333, 53: 7.666666666666667, 54: 7.666666666666667, 55: 7.666666666666667, 57: 7.666666666666667, 58: 7.666666666666667, 60: 7.666666666666667, 61: 7.666666666666667, 62: 7.666666666666667, 63: 7.666666666666667, 70: 7.666666666666667, 77: 7.666666666666667, 59: 7.666666666666667, 64: 7.666666666666667, 68: 7.666666666666667, 78: 7.666666666666667, 56: 7.666666666666667, 71: 8.0, 72: 6.0, 73: 6.0, 75: 8.0, 65: 3.6666666666666665, 66: 3.6666666666666665, 79: 2.6666666666666665, 80: 2.6666666666666665, 51: -0.3333333333333333} ['53']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 64: 10, 74: 10, 62: 10, 66: 9, 67: 9, 68: 9, 58: 7, 59: 7, 75: 6, 76: 6, 71: 4, 72: 4}), 'PASS': Counter()})
49 {49: 10.0, 50: 10.0, 51: 10.0, 52: 10.0, 53: 10.0, 54: 10.0, 56: 10.0, 58: 7.0, 59: 7.0, 64: 10.0, 71: 4.0, 72: 4.0, 74: 10.0, 62: 10.0, 66: 9.0, 67: 9.0, 68: 9.0, 75: 6.0, 76: 6.0} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 52: 10, 53: 10, 54: 10, 50: 6, 55: 3, 56: 3}), 'PASS': Counter()})
45 {45: 10.0, 46: 10.0, 47: 10.0, 48: 10.0, 49: 10.0, 52: 10.0, 53: 10.0, 54: 10.0, 55: 3.0, 56: 3.0, 50: 6.0} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({46: 4, 47: 4, 48: 4, 49: 4, 50: 4, 51: 4, 56: 4, 61: 4, 62: 4, 52: 3, 53: 3, 54: 3, 55: 3, 57: 3, 58: 3, 59: 3}), 'PASS': Counter({46: 6, 47: 6, 48: 6, 49: 6, 50: 6, 51: 6, 52: 6, 53: 6, 54: 6, 55: 6, 61: 6, 56: 6, 57: 6, 58: 6, 59: 6, 62: 6})})
46 {46: 3.142857142857143, 47: 3.142857142857143, 48: 3.142857142857143, 49: 3.142857142857143, 50: 3.142857142857143, 51: 3.142857142857143, 56: 3.142857142857143, 61: 3.142857142857143, 62: 3.142857142857143, 52: 2.142857142857143, 53: 2.142857142857143, 54: 2.142857142857143, 55: 2.142857142857143, 57: 2.142857142857143, 58: 2.142857142857143, 59: 2.142857142857143} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LENGTH_LONGEST_BALANCED_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 50: 10, 52: 10, 53: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 54: 10, 60: 9, 51: 9, 61: 2, 62: 2}), 'PASS': Counter()})
45 {45: 10.0, 46: 10.0, 47: 10.0, 48: 10.0, 49: 10.0, 50: 10.0, 52: 10.0, 53: 10.0, 55: 10.0, 56: 10.0, 57: 10.0, 58: 10.0, 59: 10.0, 54: 10.0, 60: 9.0, 51: 9.0, 61: 2.0, 62: 2.0} ['45']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 50: 7, 51: 7, 4294967295: 1}), 'FAIL': Counter({40: 2, 41: 2, 42: 2, 43: 2, 44: 2, 46: 2, 47: 2, 48: 2, 50: 2, 51: 2})})
40 {40: 1.2222222222222223, 41: 1.2222222222222223, 42: 1.2222222222222223, 43: 1.2222222222222223, 44: 1.2222222222222223, 46: 1.2222222222222223, 47: 1.2222222222222223, 48: 1.2222222222222223, 50: 1.2222222222222223, 51: 1.2222222222222223, 4294967295: -0.1111111111111111} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_EQUAL_POINT_STRING_BRACKETS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 8, 55: 8, 56: 8, 57: 8, 58: 8, 59: 8, 60: 8, 61: 8, 62: 8, 63: 8, 65: 8, 67: 8, 64: 8, 68: 8, 69: 8, 71: 8, 73: 8, 70: 8, 74: 8, 75: 8, 80: 8, 66: 7, 72: 7, 76: 7, 77: 7, 78: 7, 79: 7}), 'PASS': Counter({54: 2, 55: 2, 56: 2, 57: 2, 58: 2, 59: 2, 60: 2, 61: 2, 62: 2, 63: 2, 65: 2, 66: 2, 67: 2, 64: 2, 68: 2, 69: 2, 71: 2, 73: 2, 70: 2, 72: 2, 74: 2, 75: 2, 76: 2, 77: 2, 78: 2, 79: 2, 80: 2})})
54 {54: 7.333333333333333, 55: 7.333333333333333, 56: 7.333333333333333, 57: 7.333333333333333, 58: 7.333333333333333, 59: 7.333333333333333, 60: 7.333333333333333, 61: 7.333333333333333, 62: 7.333333333333333, 63: 7.333333333333333, 65: 7.333333333333333, 67: 7.333333333333333, 64: 7.333333333333333, 66: 6.333333333333333, 68: 7.333333333333333, 69: 7.333333333333333, 71: 7.333333333333333, 73: 7.333333333333333, 70: 7.333333333333333, 72: 6.333333333333333, 74: 7.333333333333333, 75: 7.333333333333333, 76: 6.333333333333333, 77: 6.333333333333333, 78: 6.333333333333333, 79: 6.333333333333333, 80: 7.333333333333333} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 49: 7, 50: 7, 51: 7, 45: 7, 52: 7}), 'FAIL': Counter({40: 3, 41: 3, 42: 3, 43: 3, 44: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 45: 3, 52: 3})})
40 {40: 2.125, 41: 2.125, 42: 2.125, 43: 2.125, 44: 2.125, 46: 2.125, 47: 2.125, 48: 2.125, 49: 2.125, 50: 2.125, 51: 2.125, 45: 2.125, 52: 2.125} ['48']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({41: 8, 42: 8, 43: 8, 44: 8, 46: 4, 47: 4, 49: 4, 50: 4, 51: 4, 48: 4, 53: 4, 54: 4, 52: 2, 45: 2}), 'PASS': Counter({41: 2, 42: 2, 43: 2, 44: 2, 53: 2, 54: 2})})
41 {41: 7.333333333333333, 42: 7.333333333333333, 43: 7.333333333333333, 44: 7.333333333333333, 46: 4.0, 47: 4.0, 49: 4.0, 50: 4.0, 51: 4.0, 48: 4.0, 52: 2.0, 45: 2.0, 53: 3.3333333333333335, 54: 3.3333333333333335} ['41']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 60: 1, 61: 1}), 'FAIL': Counter({45: 9, 46: 9, 47: 9, 48: 9, 49: 9, 50: 9, 51: 9, 52: 9, 53: 9, 56: 9, 57: 9, 58: 9, 59: 9, 54: 5, 60: 3, 61: 3})})
50 {45: 8.5, 46: 8.5, 47: 8.5, 48: 8.5, 49: 8.5, 50: 9.0, 51: 9.0, 52: 9.0, 53: 9.0, 56: 9.0, 57: 9.0, 58: 9.0, 59: 9.0, 54: 5.0, 60: 2.5, 61: 2.5} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 52: 7, 53: 7, 64: 7, 65: 7, 73: 7, 54: 7, 55: 7, 66: 5, 67: 5, 56: 5, 57: 5, 69: 4, 59: 4, 62: 3}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 64: 3, 65: 3, 73: 3, 54: 3, 55: 3, 62: 3, 69: 2, 56: 2, 57: 2, 75: 2, 76: 2, 66: 1, 67: 1, 59: 1})})
49 {49: 6.25, 50: 6.25, 51: 6.25, 52: 6.25, 53: 6.25, 64: 6.25, 65: 6.25, 69: 3.5, 66: 4.75, 67: 4.75, 73: 6.25, 54: 6.25, 55: 6.25, 59: 3.75, 56: 4.5, 57: 4.5, 62: 2.25, 75: -0.5, 76: -0.5} ['49']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({44: 7, 45: 7, 46: 7, 47: 7, 48: 7, 49: 7, 55: 7, 50: 7, 51: 7, 52: 7, 53: 7, 54: 7, 56: 7, 57: 7}), 'PASS': Counter({44: 3, 45: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 54: 3, 55: 3, 56: 3, 57: 3})})
44 {44: 6.25, 45: 6.25, 46: 6.25, 47: 6.25, 48: 6.25, 49: 6.25, 55: 6.25, 50: 6.25, 51: 6.25, 52: 6.25, 53: 6.25, 54: 6.25, 56: 6.25, 57: 6.25} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 9, 41: 9, 42: 9, 43: 9, 45: 9, 46: 9, 48: 9, 47: 9}), 'PASS': Counter({40: 1, 41: 1, 42: 1, 43: 1, 45: 1, 46: 1, 50: 1, 44: 1})})
48 {40: 8.5, 41: 8.5, 42: 8.5, 43: 8.5, 45: 8.5, 46: 8.5, 48: 9.0, 47: 9.0, 50: -0.5, 44: -0.5} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MULTIPLY_LARGE_NUMBERS_REPRESENTED_AS_STRINGS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 65: 10, 66: 10, 67: 10, 68: 10, 69: 10, 70: 10, 71: 10, 72: 10, 74: 10, 75: 10, 77: 2, 78: 2, 79: 2, 80: 2, 81: 2, 82: 2, 83: 2}), 'PASS': Counter()})
57 {57: 10.0, 58: 10.0, 59: 10.0, 60: 10.0, 61: 10.0, 62: 10.0, 63: 10.0, 64: 10.0, 65: 10.0, 66: 10.0, 67: 10.0, 68: 10.0, 69: 10.0, 70: 10.0, 71: 10.0, 72: 10.0, 74: 10.0, 75: 10.0, 77: 2.0, 78: 2.0, 79: 2.0, 80: 2.0, 81: 2.0, 82: 2.0, 83: 2.0} ['81']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 10, 44: 10, 45: 10, 46: 10, 47: 9, 48: 9, 49: 9, 50: 9, 52: 6, 53: 3, 54: 3}), 'PASS': Counter()})
43 {43: 10.0, 44: 10.0, 45: 10.0, 46: 10.0, 47: 9.0, 48: 9.0, 49: 9.0, 50: 9.0, 52: 6.0, 53: 3.0, 54: 3.0} ['44']
Got it right 10 times.
Testing barinel
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({51: 10, 52: 10, 53: 10, 55: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 62: 10, 63: 10, 65: 10, 64: 10, 66: 10, 61: 10}), 'PASS': Counter()})
51 {51: 1.0, 52: 1.0, 53: 1.0, 55: 1.0, 54: 1.0, 56: 1.0, 57: 1.0, 59: 1.0, 60: 1.0, 62: 1.0, 63: 1.0, 65: 1.0, 64: 1.0, 66: 1.0, 61: 1.0} ['51']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/EULERIAN_NUMBER_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 9, 43: 9, 44: 9, 46: 9, 47: 9, 49: 9, 50: 9, 52: 9, 53: 9, 48: 9, 54: 5, 45: 5, 51: 4}), 'PASS': Counter({42: 1, 43: 1, 44: 1, 46: 1, 47: 1, 49: 1, 50: 1, 52: 1, 53: 1, 48: 1})})
54 {42: 0.9, 43: 0.9, 44: 0.9, 46: 0.9, 47: 0.9, 49: 0.9, 50: 0.9, 52: 0.9, 53: 0.9, 48: 0.9, 54: 1.0, 45: 1.0, 51: 1.0} ['42']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ABSOLUTE_DIFFERENCE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 9, 44: 9, 45: 9, 46: 9, 47: 9, 49: 9, 50: 9, 51: 9, 53: 9, 54: 9, 55: 9}), 'PASS': Counter({43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 49: 1, 50: 1, 51: 1, 53: 1, 54: 1, 55: 1})})
43 {43: 0.9, 44: 0.9, 45: 0.9, 46: 0.9, 47: 0.9, 49: 0.9, 50: 0.9, 51: 0.9, 53: 0.9, 54: 0.9, 55: 0.9} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DICE_THROW_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 10, 47: 10, 46: 10, 48: 1}), 'PASS': Counter()})
40 {40: 1.0, 41: 1.0, 42: 1.0, 43: 1.0, 44: 1.0, 45: 1.0, 47: 1.0, 46: 1.0, 48: 1.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 9, 56: 9, 57: 9, 58: 9, 59: 9, 60: 9, 61: 9, 62: 9, 65: 9, 66: 9, 67: 9, 63: 4, 64: 4, 68: 3, 69: 3, 70: 3, 71: 3, 72: 3, 73: 3, 74: 3}), 'PASS': Counter({55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 68: 1, 69: 1, 73: 1, 74: 1})})
61 {55: 0.9, 56: 0.9, 57: 0.9, 58: 0.9, 59: 0.9, 60: 0.9, 61: 1.0, 62: 1.0, 65: 1.0, 66: 1.0, 67: 1.0, 68: 0.75, 69: 0.75, 70: 1.0, 71: 1.0, 72: 1.0, 73: 0.75, 74: 0.75, 63: 1.0, 64: 1.0} ['56', '57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME_WITH_PERMUTATIONS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({37: 10, 38: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10}), 'PASS': Counter()})
37 {37: 1.0, 38: 1.0, 40: 1.0, 41: 1.0, 42: 1.0, 43: 1.0, 44: 1.0} ['39']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({38: 10, 39: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 3, 46: 3}), 'PASS': Counter()})
38 {38: 1.0, 39: 1.0, 40: 1.0, 41: 1.0, 42: 1.0, 43: 1.0, 44: 1.0, 45: 1.0, 46: 1.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 66: 5, 58: 5, 65: 1}), 'PASS': Counter()})
49 {49: 1.0, 50: 1.0, 51: 1.0, 52: 1.0, 53: 1.0, 54: 1.0, 56: 1.0, 57: 1.0, 59: 1.0, 60: 1.0, 61: 1.0, 62: 1.0, 63: 1.0, 64: 1.0, 66: 1.0, 58: 1.0, 65: 1.0} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 7, 55: 7, 56: 7, 58: 7, 57: 7, 59: 5, 60: 5, 61: 5, 63: 5, 62: 5, 64: 3, 65: 3, 66: 3, 69: 3, 70: 3, 72: 3, 73: 3, 74: 3, 75: 3, 78: 2, 67: 2, 76: 1, 81: 1}), 'PASS': Counter({54: 3, 55: 3, 56: 3, 58: 3, 57: 3, 59: 3, 60: 3, 61: 3, 63: 3, 62: 3, 64: 2, 65: 2, 66: 2, 69: 2, 70: 2, 72: 2, 73: 2, 74: 2, 75: 2, 78: 2, 67: 2, 80: 2, 81: 2})})
76 {54: 0.7, 55: 0.7, 56: 0.7, 58: 0.7, 57: 0.7, 59: 0.625, 60: 0.625, 61: 0.625, 63: 0.625, 62: 0.625, 64: 0.6, 65: 0.6, 66: 0.6, 69: 0.6, 70: 0.6, 72: 0.6, 73: 0.6, 74: 0.6, 75: 0.6, 78: 0.5, 67: 0.5, 76: 1.0, 81: 0.33333333333333337, 80: 0.0} ['59']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 53: 7, 52: 7, 54: 6, 55: 5, 56: 5, 58: 5, 59: 5, 67: 5, 57: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 60: 4}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 53: 3, 52: 3, 54: 3, 55: 3, 56: 3, 58: 3, 59: 3, 67: 3, 57: 3, 61: 1, 62: 1, 63: 1, 65: 1, 66: 1, 60: 1})})
64 {49: 0.7, 50: 0.7, 51: 0.7, 53: 0.7, 52: 0.7, 54: 0.6666666666666667, 55: 0.625, 56: 0.625, 58: 0.625, 59: 0.625, 61: 0.8, 62: 0.8, 63: 0.8, 64: 1.0, 65: 0.8, 66: 0.8, 60: 0.8, 67: 0.625, 57: 0.625} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROME_SUB_STRINGS_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 64: 10, 61: 7, 62: 7, 65: 7, 66: 7, 67: 7, 68: 7, 70: 7, 74: 7, 73: 6, 71: 5, 75: 4, 69: 2, 76: 1, 77: 1}), 'PASS': Counter()})
55 {55: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 60: 1.0, 61: 1.0, 62: 1.0, 64: 1.0, 65: 1.0, 66: 1.0, 67: 1.0, 68: 1.0, 70: 1.0, 73: 1.0, 74: 1.0, 75: 1.0, 71: 1.0, 69: 1.0, 76: 1.0, 77: 1.0} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_AND_NON_OVERLAPPING_SUBSTRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 71: 4, 76: 4, 77: 4, 61: 3, 62: 3, 66: 3, 63: 2, 64: 2, 65: 2, 72: 1, 73: 1, 74: 1, 75: 1}), 'PASS': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 71: 1, 76: 1, 77: 1})})
72 {53: 0.5, 54: 0.5, 55: 0.5, 56: 0.5, 57: 0.5, 58: 0.5, 59: 0.5, 60: 0.5, 67: 0.5, 69: 0.5, 70: 0.5, 71: 0.8, 76: 0.8, 77: 0.8, 61: 0.4285714285714286, 62: 0.4285714285714286, 66: 0.4285714285714286, 63: 0.33333333333333337, 64: 0.33333333333333337, 65: 0.33333333333333337, 72: 1.0, 73: 1.0, 74: 1.0, 75: 1.0} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 4, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 1}), 'PASS': Counter({43: 6, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 4, 54: 3, 55: 3})})
44 {43: 0.4, 44: 0.5, 45: 0.5, 46: 0.5, 47: 0.5, 51: 0.5, 53: 0.19999999999999996, 54: 0.0, 55: 0.0} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({59: 7, 60: 7, 61: 7, 62: 7, 63: 7, 64: 7, 68: 7, 69: 7, 71: 7, 74: 7, 75: 7, 76: 7, 77: 7, 82: 7, 92: 7, 93: 7, 83: 7, 87: 7, 91: 7, 95: 7, 96: 7, 97: 7, 98: 7, 99: 7, 65: 6, 66: 6, 67: 6, 88: 6, 89: 6, 78: 5, 81: 5, 79: 1}), 'PASS': Counter({59: 3, 60: 3, 61: 3, 62: 3, 63: 3, 64: 3, 65: 3, 66: 3, 67: 3, 68: 3, 69: 3, 71: 3, 99: 3, 72: 2, 74: 1, 75: 1, 76: 1, 77: 1, 82: 1, 83: 1, 87: 1, 88: 1, 89: 1, 91: 1, 92: 1, 93: 1, 95: 1, 96: 1, 97: 1, 98: 1})})
78 {59: 0.7, 60: 0.7, 61: 0.7, 62: 0.7, 63: 0.7, 64: 0.7, 68: 0.7, 69: 0.7, 65: 0.6666666666666667, 66: 0.6666666666666667, 67: 0.6666666666666667, 71: 0.7, 74: 0.875, 75: 0.875, 76: 0.875, 77: 0.875, 82: 0.875, 92: 0.875, 93: 0.875, 83: 0.875, 87: 0.875, 88: 0.8571428571428572, 89: 0.8571428571428572, 91: 0.875, 78: 1.0, 79: 1.0, 81: 1.0, 95: 0.875, 96: 0.875, 97: 0.875, 98: 0.875, 99: 0.7, 72: 0.0} ['97']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 10, 54: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 68: 10, 69: 10, 63: 10, 64: 4, 65: 4, 66: 4, 70: 1, 71: 1}), 'PASS': Counter()})
53 {53: 1.0, 54: 1.0, 55: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 60: 1.0, 61: 1.0, 68: 1.0, 69: 1.0, 63: 1.0, 64: 1.0, 65: 1.0, 66: 1.0, 70: 1.0, 71: 1.0} ['57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/UNBOUNDED_KNAPSACK_REPETITION_ITEMS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({36: 9, 37: 9, 38: 9, 39: 9, 42: 9, 43: 9, 40: 5, 44: 2, 45: 2}), 'PASS': Counter({36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 42: 1, 43: 1})})
44 {36: 0.9, 37: 0.9, 38: 0.9, 39: 0.9, 42: 0.9, 43: 0.9, 44: 1.0, 45: 1.0, 40: 0.8333333333333334} ['36']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 10, 43: 10, 44: 10, 45: 10, 46: 10, 47: 10, 48: 10, 50: 10}), 'PASS': Counter()})
42 {42: 1.0, 43: 1.0, 44: 1.0, 45: 1.0, 46: 1.0, 47: 1.0, 48: 1.0, 50: 1.0} ['43']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 8, 50: 8, 53: 8, 54: 8, 55: 8, 57: 8, 58: 8, 60: 8, 61: 8, 62: 8, 63: 8, 70: 8, 77: 8, 59: 8, 64: 8, 68: 8, 78: 8, 56: 8, 71: 8, 75: 8, 72: 6, 73: 6, 65: 4, 66: 4, 79: 3, 80: 3}), 'PASS': Counter({49: 2, 50: 2, 53: 1, 54: 1, 55: 1, 57: 1, 58: 1, 60: 1, 61: 1, 62: 1, 63: 1, 70: 1, 77: 1, 59: 1, 64: 1, 68: 1, 65: 1, 66: 1, 78: 1, 56: 1, 79: 1, 80: 1, 51: 1})})
71 {49: 0.8, 50: 0.8, 53: 0.8888888888888888, 54: 0.8888888888888888, 55: 0.8888888888888888, 57: 0.8888888888888888, 58: 0.8888888888888888, 60: 0.8888888888888888, 61: 0.8888888888888888, 62: 0.8888888888888888, 63: 0.8888888888888888, 70: 0.8888888888888888, 77: 0.8888888888888888, 59: 0.8888888888888888, 64: 0.8888888888888888, 68: 0.8888888888888888, 78: 0.8888888888888888, 56: 0.8888888888888888, 71: 1.0, 72: 1.0, 73: 1.0, 75: 1.0, 65: 0.8, 66: 0.8, 79: 0.75, 80: 0.75, 51: 0.0} ['53']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 64: 10, 74: 10, 62: 10, 66: 9, 67: 9, 68: 9, 58: 7, 59: 7, 75: 6, 76: 6, 71: 4, 72: 4}), 'PASS': Counter()})
49 {49: 1.0, 50: 1.0, 51: 1.0, 52: 1.0, 53: 1.0, 54: 1.0, 56: 1.0, 58: 1.0, 59: 1.0, 64: 1.0, 71: 1.0, 72: 1.0, 74: 1.0, 62: 1.0, 66: 1.0, 67: 1.0, 68: 1.0, 75: 1.0, 76: 1.0} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 52: 10, 53: 10, 54: 10, 50: 6, 55: 3, 56: 3}), 'PASS': Counter()})
45 {45: 1.0, 46: 1.0, 47: 1.0, 48: 1.0, 49: 1.0, 52: 1.0, 53: 1.0, 54: 1.0, 55: 1.0, 56: 1.0, 50: 1.0} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({46: 4, 47: 4, 48: 4, 49: 4, 50: 4, 51: 4, 56: 4, 61: 4, 62: 4, 52: 3, 53: 3, 54: 3, 55: 3, 57: 3, 58: 3, 59: 3}), 'PASS': Counter({46: 6, 47: 6, 48: 6, 49: 6, 50: 6, 51: 6, 52: 6, 53: 6, 54: 6, 55: 6, 61: 6, 56: 6, 57: 6, 58: 6, 59: 6, 62: 6})})
46 {46: 0.4, 47: 0.4, 48: 0.4, 49: 0.4, 50: 0.4, 51: 0.4, 56: 0.4, 61: 0.4, 62: 0.4, 52: 0.33333333333333337, 53: 0.33333333333333337, 54: 0.33333333333333337, 55: 0.33333333333333337, 57: 0.33333333333333337, 58: 0.33333333333333337, 59: 0.33333333333333337} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LENGTH_LONGEST_BALANCED_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 50: 10, 52: 10, 53: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 54: 10, 60: 9, 51: 9, 61: 2, 62: 2}), 'PASS': Counter()})
45 {45: 1.0, 46: 1.0, 47: 1.0, 48: 1.0, 49: 1.0, 50: 1.0, 52: 1.0, 53: 1.0, 55: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 54: 1.0, 60: 1.0, 51: 1.0, 61: 1.0, 62: 1.0} ['45']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 50: 7, 51: 7, 4294967295: 1}), 'FAIL': Counter({40: 2, 41: 2, 42: 2, 43: 2, 44: 2, 46: 2, 47: 2, 48: 2, 50: 2, 51: 2})})
40 {40: 0.2222222222222222, 41: 0.2222222222222222, 42: 0.2222222222222222, 43: 0.2222222222222222, 44: 0.2222222222222222, 46: 0.2222222222222222, 47: 0.2222222222222222, 48: 0.2222222222222222, 50: 0.2222222222222222, 51: 0.2222222222222222, 4294967295: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_EQUAL_POINT_STRING_BRACKETS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 8, 55: 8, 56: 8, 57: 8, 58: 8, 59: 8, 60: 8, 61: 8, 62: 8, 63: 8, 65: 8, 67: 8, 64: 8, 68: 8, 69: 8, 71: 8, 73: 8, 70: 8, 74: 8, 75: 8, 80: 8, 66: 7, 72: 7, 76: 7, 77: 7, 78: 7, 79: 7}), 'PASS': Counter({54: 2, 55: 2, 56: 2, 57: 2, 58: 2, 59: 2, 60: 2, 61: 2, 62: 2, 63: 2, 65: 2, 66: 2, 67: 2, 64: 2, 68: 2, 69: 2, 71: 2, 73: 2, 70: 2, 72: 2, 74: 2, 75: 2, 76: 2, 77: 2, 78: 2, 79: 2, 80: 2})})
54 {54: 0.8, 55: 0.8, 56: 0.8, 57: 0.8, 58: 0.8, 59: 0.8, 60: 0.8, 61: 0.8, 62: 0.8, 63: 0.8, 65: 0.8, 67: 0.8, 64: 0.8, 66: 0.7777777777777778, 68: 0.8, 69: 0.8, 71: 0.8, 73: 0.8, 70: 0.8, 72: 0.7777777777777778, 74: 0.8, 75: 0.8, 76: 0.7777777777777778, 77: 0.7777777777777778, 78: 0.7777777777777778, 79: 0.7777777777777778, 80: 0.8} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 49: 7, 50: 7, 51: 7, 45: 7, 52: 7}), 'FAIL': Counter({40: 3, 41: 3, 42: 3, 43: 3, 44: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 45: 3, 52: 3})})
40 {40: 0.30000000000000004, 41: 0.30000000000000004, 42: 0.30000000000000004, 43: 0.30000000000000004, 44: 0.30000000000000004, 46: 0.30000000000000004, 47: 0.30000000000000004, 48: 0.30000000000000004, 49: 0.30000000000000004, 50: 0.30000000000000004, 51: 0.30000000000000004, 45: 0.30000000000000004, 52: 0.30000000000000004} ['48']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({41: 8, 42: 8, 43: 8, 44: 8, 46: 4, 47: 4, 49: 4, 50: 4, 51: 4, 48: 4, 53: 4, 54: 4, 52: 2, 45: 2}), 'PASS': Counter({41: 2, 42: 2, 43: 2, 44: 2, 53: 2, 54: 2})})
46 {41: 0.8, 42: 0.8, 43: 0.8, 44: 0.8, 46: 1.0, 47: 1.0, 49: 1.0, 50: 1.0, 51: 1.0, 48: 1.0, 52: 1.0, 45: 1.0, 53: 0.6666666666666667, 54: 0.6666666666666667} ['41']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 60: 1, 61: 1}), 'FAIL': Counter({45: 9, 46: 9, 47: 9, 48: 9, 49: 9, 50: 9, 51: 9, 52: 9, 53: 9, 56: 9, 57: 9, 58: 9, 59: 9, 54: 5, 60: 3, 61: 3})})
50 {45: 0.9, 46: 0.9, 47: 0.9, 48: 0.9, 49: 0.9, 50: 1.0, 51: 1.0, 52: 1.0, 53: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 54: 1.0, 60: 0.75, 61: 0.75} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 52: 7, 53: 7, 64: 7, 65: 7, 73: 7, 54: 7, 55: 7, 66: 5, 67: 5, 56: 5, 57: 5, 69: 4, 59: 4, 62: 3}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 64: 3, 65: 3, 73: 3, 54: 3, 55: 3, 62: 3, 69: 2, 56: 2, 57: 2, 75: 2, 76: 2, 66: 1, 67: 1, 59: 1})})
66 {49: 0.7, 50: 0.7, 51: 0.7, 52: 0.7, 53: 0.7, 64: 0.7, 65: 0.7, 69: 0.6666666666666667, 66: 0.8333333333333334, 67: 0.8333333333333334, 73: 0.7, 54: 0.7, 55: 0.7, 59: 0.8, 56: 0.7142857142857143, 57: 0.7142857142857143, 62: 0.5, 75: 0.0, 76: 0.0} ['49']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({44: 7, 45: 7, 46: 7, 47: 7, 48: 7, 49: 7, 55: 7, 50: 7, 51: 7, 52: 7, 53: 7, 54: 7, 56: 7, 57: 7}), 'PASS': Counter({44: 3, 45: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 54: 3, 55: 3, 56: 3, 57: 3})})
44 {44: 0.7, 45: 0.7, 46: 0.7, 47: 0.7, 48: 0.7, 49: 0.7, 55: 0.7, 50: 0.7, 51: 0.7, 52: 0.7, 53: 0.7, 54: 0.7, 56: 0.7, 57: 0.7} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 9, 41: 9, 42: 9, 43: 9, 45: 9, 46: 9, 48: 9, 47: 9}), 'PASS': Counter({40: 1, 41: 1, 42: 1, 43: 1, 45: 1, 46: 1, 50: 1, 44: 1})})
48 {40: 0.9, 41: 0.9, 42: 0.9, 43: 0.9, 45: 0.9, 46: 0.9, 48: 1.0, 47: 1.0, 50: 0.0, 44: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MULTIPLY_LARGE_NUMBERS_REPRESENTED_AS_STRINGS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 65: 10, 66: 10, 67: 10, 68: 10, 69: 10, 70: 10, 71: 10, 72: 10, 74: 10, 75: 10, 77: 2, 78: 2, 79: 2, 80: 2, 81: 2, 82: 2, 83: 2}), 'PASS': Counter()})
57 {57: 1.0, 58: 1.0, 59: 1.0, 60: 1.0, 61: 1.0, 62: 1.0, 63: 1.0, 64: 1.0, 65: 1.0, 66: 1.0, 67: 1.0, 68: 1.0, 69: 1.0, 70: 1.0, 71: 1.0, 72: 1.0, 74: 1.0, 75: 1.0, 77: 1.0, 78: 1.0, 79: 1.0, 80: 1.0, 81: 1.0, 82: 1.0, 83: 1.0} ['81']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 10, 44: 10, 45: 10, 46: 10, 47: 9, 48: 9, 49: 9, 50: 9, 52: 6, 53: 3, 54: 3}), 'PASS': Counter()})
43 {43: 1.0, 44: 1.0, 45: 1.0, 46: 1.0, 47: 1.0, 48: 1.0, 49: 1.0, 50: 1.0, 52: 1.0, 53: 1.0, 54: 1.0} ['44']
Got it right 6 times.
Testing d_star
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({51: 10, 52: 10, 53: 10, 55: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 62: 10, 63: 10, 65: 10, 64: 10, 66: 10, 61: 10}), 'PASS': Counter()})
51 {51: inf, 52: inf, 53: inf, 55: inf, 54: inf, 56: inf, 57: inf, 59: inf, 60: inf, 62: inf, 63: inf, 65: inf, 64: inf, 66: inf, 61: inf} ['51']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/EULERIAN_NUMBER_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 9, 43: 9, 44: 9, 46: 9, 47: 9, 49: 9, 50: 9, 52: 9, 53: 9, 48: 9, 54: 5, 45: 5, 51: 4}), 'PASS': Counter({42: 1, 43: 1, 44: 1, 46: 1, 47: 1, 49: 1, 50: 1, 52: 1, 53: 1, 48: 1})})
42 {42: 9.0, 43: 9.0, 44: 9.0, 46: 9.0, 47: 9.0, 49: 9.0, 50: 9.0, 52: 9.0, 53: 9.0, 48: 9.0, 54: 1.25, 45: 1.25, 51: 0.8} ['42']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ABSOLUTE_DIFFERENCE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 9, 44: 9, 45: 9, 46: 9, 47: 9, 49: 9, 50: 9, 51: 9, 53: 9, 54: 9, 55: 9}), 'PASS': Counter({43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 49: 1, 50: 1, 51: 1, 53: 1, 54: 1, 55: 1})})
43 {43: 9.0, 44: 9.0, 45: 9.0, 46: 9.0, 47: 9.0, 49: 9.0, 50: 9.0, 51: 9.0, 53: 9.0, 54: 9.0, 55: 9.0} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DICE_THROW_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 10, 47: 10, 46: 10, 48: 1}), 'PASS': Counter()})
40 {40: inf, 41: inf, 42: inf, 43: inf, 44: inf, 45: inf, 47: inf, 46: inf, 48: 0.1111111111111111} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 9, 56: 9, 57: 9, 58: 9, 59: 9, 60: 9, 61: 9, 62: 9, 65: 9, 66: 9, 67: 9, 63: 4, 64: 4, 68: 3, 69: 3, 70: 3, 71: 3, 72: 3, 73: 3, 74: 3}), 'PASS': Counter({55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 68: 1, 69: 1, 73: 1, 74: 1})})
61 {55: 9.0, 56: 9.0, 57: 9.0, 58: 9.0, 59: 9.0, 60: 9.0, 61: inf, 62: inf, 65: inf, 66: inf, 67: inf, 68: 0.42857142857142855, 69: 0.42857142857142855, 70: 0.5, 71: 0.5, 72: 0.5, 73: 0.42857142857142855, 74: 0.42857142857142855, 63: 0.8, 64: 0.8} ['56', '57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_INSERTIONS_TO_FORM_A_PALINDROME_WITH_PERMUTATIONS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({37: 10, 38: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10}), 'PASS': Counter()})
37 {37: inf, 38: inf, 40: inf, 41: inf, 42: inf, 43: inf, 44: inf} ['39']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({38: 10, 39: 10, 40: 10, 41: 10, 42: 10, 43: 10, 44: 10, 45: 3, 46: 3}), 'PASS': Counter()})
38 {38: inf, 39: inf, 40: inf, 41: inf, 42: inf, 43: inf, 44: inf, 45: 0.42857142857142855, 46: 0.42857142857142855} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 57: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 66: 5, 58: 5, 65: 1}), 'PASS': Counter()})
49 {49: inf, 50: inf, 51: inf, 52: inf, 53: inf, 54: inf, 56: inf, 57: inf, 59: inf, 60: inf, 61: inf, 62: inf, 63: inf, 64: inf, 66: 1.0, 58: 1.0, 65: 0.1111111111111111} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 7, 55: 7, 56: 7, 58: 7, 57: 7, 59: 5, 60: 5, 61: 5, 63: 5, 62: 5, 64: 3, 65: 3, 66: 3, 69: 3, 70: 3, 72: 3, 73: 3, 74: 3, 75: 3, 78: 2, 67: 2, 76: 1, 81: 1}), 'PASS': Counter({54: 3, 55: 3, 56: 3, 58: 3, 57: 3, 59: 3, 60: 3, 61: 3, 63: 3, 62: 3, 64: 2, 65: 2, 66: 2, 69: 2, 70: 2, 72: 2, 73: 2, 74: 2, 75: 2, 78: 2, 67: 2, 80: 2, 81: 2})})
54 {54: 2.3333333333333335, 55: 2.3333333333333335, 56: 2.3333333333333335, 58: 2.3333333333333335, 57: 2.3333333333333335, 59: 1.0, 60: 1.0, 61: 1.0, 63: 1.0, 62: 1.0, 64: 0.5, 65: 0.5, 66: 0.5, 69: 0.5, 70: 0.5, 72: 0.5, 73: 0.5, 74: 0.5, 75: 0.5, 78: 0.2857142857142857, 67: 0.2857142857142857, 76: 0.16666666666666666, 81: 0.125, 80: 0.0} ['59']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_PAIR_MAXIMUM_GCD_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 53: 7, 52: 7, 54: 6, 55: 5, 56: 5, 58: 5, 59: 5, 67: 5, 57: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 60: 4}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 53: 3, 52: 3, 54: 3, 55: 3, 56: 3, 58: 3, 59: 3, 67: 3, 57: 3, 61: 1, 62: 1, 63: 1, 65: 1, 66: 1, 60: 1})})
49 {49: 2.3333333333333335, 50: 2.3333333333333335, 51: 2.3333333333333335, 53: 2.3333333333333335, 52: 2.3333333333333335, 54: 1.5, 55: 1.0, 56: 1.0, 58: 1.0, 59: 1.0, 61: 1.0, 62: 1.0, 63: 1.0, 64: 1.3333333333333333, 65: 1.0, 66: 1.0, 60: 1.0, 67: 1.0, 57: 1.0} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROME_SUB_STRINGS_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 64: 10, 61: 7, 62: 7, 65: 7, 66: 7, 67: 7, 68: 7, 70: 7, 74: 7, 73: 6, 71: 5, 75: 4, 69: 2, 76: 1, 77: 1}), 'PASS': Counter()})
55 {55: inf, 56: inf, 57: inf, 58: inf, 59: inf, 60: inf, 61: 2.3333333333333335, 62: 2.3333333333333335, 64: inf, 65: 2.3333333333333335, 66: 2.3333333333333335, 67: 2.3333333333333335, 68: 2.3333333333333335, 70: 2.3333333333333335, 73: 1.5, 74: 2.3333333333333335, 75: 0.6666666666666666, 71: 1.0, 69: 0.25, 76: 0.1111111111111111, 77: 0.1111111111111111} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_AND_NON_OVERLAPPING_SUBSTRING.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 71: 4, 76: 4, 77: 4, 61: 3, 62: 3, 66: 3, 63: 2, 64: 2, 65: 2, 72: 1, 73: 1, 74: 1, 75: 1}), 'PASS': Counter({53: 5, 54: 5, 55: 5, 56: 5, 57: 5, 58: 5, 59: 5, 60: 5, 67: 5, 69: 5, 70: 5, 61: 4, 62: 4, 63: 4, 64: 4, 65: 4, 66: 4, 71: 1, 76: 1, 77: 1})})
71 {53: 1.0, 54: 1.0, 55: 1.0, 56: 1.0, 57: 1.0, 58: 1.0, 59: 1.0, 60: 1.0, 67: 1.0, 69: 1.0, 70: 1.0, 71: 2.0, 76: 2.0, 77: 2.0, 61: 0.5, 62: 0.5, 66: 0.5, 63: 0.2857142857142857, 64: 0.2857142857142857, 65: 0.2857142857142857, 72: 0.25, 73: 0.25, 74: 0.25, 75: 0.25} ['54']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 4, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 1}), 'PASS': Counter({43: 6, 44: 4, 45: 4, 46: 4, 47: 4, 51: 4, 53: 4, 54: 3, 55: 3})})
44 {43: 0.6666666666666666, 44: 1.0, 45: 1.0, 46: 1.0, 47: 1.0, 51: 1.0, 53: 0.14285714285714285, 54: 0.0, 55: 0.0} ['47']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({59: 7, 60: 7, 61: 7, 62: 7, 63: 7, 64: 7, 68: 7, 69: 7, 71: 7, 74: 7, 75: 7, 76: 7, 77: 7, 82: 7, 92: 7, 93: 7, 83: 7, 87: 7, 91: 7, 95: 7, 96: 7, 97: 7, 98: 7, 99: 7, 65: 6, 66: 6, 67: 6, 88: 6, 89: 6, 78: 5, 81: 5, 79: 1}), 'PASS': Counter({59: 3, 60: 3, 61: 3, 62: 3, 63: 3, 64: 3, 65: 3, 66: 3, 67: 3, 68: 3, 69: 3, 71: 3, 99: 3, 72: 2, 74: 1, 75: 1, 76: 1, 77: 1, 82: 1, 83: 1, 87: 1, 88: 1, 89: 1, 91: 1, 92: 1, 93: 1, 95: 1, 96: 1, 97: 1, 98: 1})})
74 {59: 2.3333333333333335, 60: 2.3333333333333335, 61: 2.3333333333333335, 62: 2.3333333333333335, 63: 2.3333333333333335, 64: 2.3333333333333335, 68: 2.3333333333333335, 69: 2.3333333333333335, 65: 1.5, 66: 1.5, 67: 1.5, 71: 2.3333333333333335, 74: 7.0, 75: 7.0, 76: 7.0, 77: 7.0, 82: 7.0, 92: 7.0, 93: 7.0, 83: 7.0, 87: 7.0, 88: 3.0, 89: 3.0, 91: 7.0, 78: 2.5, 79: 0.16666666666666666, 81: 2.5, 95: 7.0, 96: 7.0, 97: 7.0, 98: 7.0, 99: 2.3333333333333335, 72: 0.0} ['97']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({53: 10, 54: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 68: 10, 69: 10, 63: 10, 64: 4, 65: 4, 66: 4, 70: 1, 71: 1}), 'PASS': Counter()})
53 {53: inf, 54: inf, 55: inf, 56: inf, 57: inf, 58: inf, 59: inf, 60: inf, 61: inf, 68: inf, 69: inf, 63: inf, 64: 0.6666666666666666, 65: 0.6666666666666666, 66: 0.6666666666666666, 70: 0.1111111111111111, 71: 0.1111111111111111} ['57']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/UNBOUNDED_KNAPSACK_REPETITION_ITEMS_ALLOWED.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({36: 9, 37: 9, 38: 9, 39: 9, 42: 9, 43: 9, 40: 5, 44: 2, 45: 2}), 'PASS': Counter({36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 42: 1, 43: 1})})
36 {36: 9.0, 37: 9.0, 38: 9.0, 39: 9.0, 42: 9.0, 43: 9.0, 44: 0.2857142857142857, 45: 0.2857142857142857, 40: 1.0} ['36']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({42: 10, 43: 10, 44: 10, 45: 10, 46: 10, 47: 10, 48: 10, 50: 10}), 'PASS': Counter()})
42 {42: inf, 43: inf, 44: inf, 45: inf, 46: inf, 47: inf, 48: inf, 50: inf} ['43']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 8, 50: 8, 53: 8, 54: 8, 55: 8, 57: 8, 58: 8, 60: 8, 61: 8, 62: 8, 63: 8, 70: 8, 77: 8, 59: 8, 64: 8, 68: 8, 78: 8, 56: 8, 71: 8, 75: 8, 72: 6, 73: 6, 65: 4, 66: 4, 79: 3, 80: 3}), 'PASS': Counter({49: 2, 50: 2, 53: 1, 54: 1, 55: 1, 57: 1, 58: 1, 60: 1, 61: 1, 62: 1, 63: 1, 70: 1, 77: 1, 59: 1, 64: 1, 68: 1, 65: 1, 66: 1, 78: 1, 56: 1, 79: 1, 80: 1, 51: 1})})
71 {49: 4.0, 50: 4.0, 53: 8.0, 54: 8.0, 55: 8.0, 57: 8.0, 58: 8.0, 60: 8.0, 61: 8.0, 62: 8.0, 63: 8.0, 70: 8.0, 77: 8.0, 59: 8.0, 64: 8.0, 68: 8.0, 78: 8.0, 56: 8.0, 71: inf, 72: 3.0, 73: 3.0, 75: inf, 65: 0.8, 66: 0.8, 79: 0.5, 80: 0.5, 51: 0.0} ['53']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 10, 50: 10, 51: 10, 52: 10, 53: 10, 54: 10, 56: 10, 64: 10, 74: 10, 62: 10, 66: 9, 67: 9, 68: 9, 58: 7, 59: 7, 75: 6, 76: 6, 71: 4, 72: 4}), 'PASS': Counter()})
49 {49: inf, 50: inf, 51: inf, 52: inf, 53: inf, 54: inf, 56: inf, 58: 2.3333333333333335, 59: 2.3333333333333335, 64: inf, 71: 0.6666666666666666, 72: 0.6666666666666666, 74: inf, 62: inf, 66: 9.0, 67: 9.0, 68: 9.0, 75: 1.5, 76: 1.5} ['51', '52']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LONGEST_REPEATING_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 52: 10, 53: 10, 54: 10, 50: 6, 55: 3, 56: 3}), 'PASS': Counter()})
45 {45: inf, 46: inf, 47: inf, 48: inf, 49: inf, 52: inf, 53: inf, 54: inf, 55: 0.42857142857142855, 56: 0.42857142857142855, 50: 1.5} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({46: 4, 47: 4, 48: 4, 49: 4, 50: 4, 51: 4, 56: 4, 61: 4, 62: 4, 52: 3, 53: 3, 54: 3, 55: 3, 57: 3, 58: 3, 59: 3}), 'PASS': Counter({46: 6, 47: 6, 48: 6, 49: 6, 50: 6, 51: 6, 52: 6, 53: 6, 54: 6, 55: 6, 61: 6, 56: 6, 57: 6, 58: 6, 59: 6, 62: 6})})
46 {46: 0.6666666666666666, 47: 0.6666666666666666, 48: 0.6666666666666666, 49: 0.6666666666666666, 50: 0.6666666666666666, 51: 0.6666666666666666, 56: 0.6666666666666666, 61: 0.6666666666666666, 62: 0.6666666666666666, 52: 0.42857142857142855, 53: 0.42857142857142855, 54: 0.42857142857142855, 55: 0.42857142857142855, 57: 0.42857142857142855, 58: 0.42857142857142855, 59: 0.42857142857142855} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/LENGTH_LONGEST_BALANCED_SUBSEQUENCE.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({45: 10, 46: 10, 47: 10, 48: 10, 49: 10, 50: 10, 52: 10, 53: 10, 55: 10, 56: 10, 57: 10, 58: 10, 59: 10, 54: 10, 60: 9, 51: 9, 61: 2, 62: 2}), 'PASS': Counter()})
45 {45: inf, 46: inf, 47: inf, 48: inf, 49: inf, 50: inf, 52: inf, 53: inf, 55: inf, 56: inf, 57: inf, 58: inf, 59: inf, 54: inf, 60: 9.0, 51: 9.0, 61: 0.25, 62: 0.25} ['45']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 50: 7, 51: 7, 4294967295: 1}), 'FAIL': Counter({40: 2, 41: 2, 42: 2, 43: 2, 44: 2, 46: 2, 47: 2, 48: 2, 50: 2, 51: 2})})
40 {40: 0.2857142857142857, 41: 0.2857142857142857, 42: 0.2857142857142857, 43: 0.2857142857142857, 44: 0.2857142857142857, 46: 0.2857142857142857, 47: 0.2857142857142857, 48: 0.2857142857142857, 50: 0.2857142857142857, 51: 0.2857142857142857, 4294967295: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FIND_EQUAL_POINT_STRING_BRACKETS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({54: 8, 55: 8, 56: 8, 57: 8, 58: 8, 59: 8, 60: 8, 61: 8, 62: 8, 63: 8, 65: 8, 67: 8, 64: 8, 68: 8, 69: 8, 71: 8, 73: 8, 70: 8, 74: 8, 75: 8, 80: 8, 66: 7, 72: 7, 76: 7, 77: 7, 78: 7, 79: 7}), 'PASS': Counter({54: 2, 55: 2, 56: 2, 57: 2, 58: 2, 59: 2, 60: 2, 61: 2, 62: 2, 63: 2, 65: 2, 66: 2, 67: 2, 64: 2, 68: 2, 69: 2, 71: 2, 73: 2, 70: 2, 72: 2, 74: 2, 75: 2, 76: 2, 77: 2, 78: 2, 79: 2, 80: 2})})
54 {54: 4.0, 55: 4.0, 56: 4.0, 57: 4.0, 58: 4.0, 59: 4.0, 60: 4.0, 61: 4.0, 62: 4.0, 63: 4.0, 65: 4.0, 67: 4.0, 64: 4.0, 66: 2.3333333333333335, 68: 4.0, 69: 4.0, 71: 4.0, 73: 4.0, 70: 4.0, 72: 2.3333333333333335, 74: 4.0, 75: 4.0, 76: 2.3333333333333335, 77: 2.3333333333333335, 78: 2.3333333333333335, 79: 2.3333333333333335, 80: 4.0} ['55', '56']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({40: 7, 41: 7, 42: 7, 43: 7, 44: 7, 46: 7, 47: 7, 48: 7, 49: 7, 50: 7, 51: 7, 45: 7, 52: 7}), 'FAIL': Counter({40: 3, 41: 3, 42: 3, 43: 3, 44: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 45: 3, 52: 3})})
40 {40: 0.42857142857142855, 41: 0.42857142857142855, 42: 0.42857142857142855, 43: 0.42857142857142855, 44: 0.42857142857142855, 46: 0.42857142857142855, 47: 0.42857142857142855, 48: 0.42857142857142855, 49: 0.42857142857142855, 50: 0.42857142857142855, 51: 0.42857142857142855, 45: 0.42857142857142855, 52: 0.42857142857142855} ['48']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({41: 8, 42: 8, 43: 8, 44: 8, 46: 4, 47: 4, 49: 4, 50: 4, 51: 4, 48: 4, 53: 4, 54: 4, 52: 2, 45: 2}), 'PASS': Counter({41: 2, 42: 2, 43: 2, 44: 2, 53: 2, 54: 2})})
41 {41: 4.0, 42: 4.0, 43: 4.0, 44: 4.0, 46: 1.0, 47: 1.0, 49: 1.0, 50: 1.0, 51: 1.0, 48: 1.0, 52: 0.3333333333333333, 45: 0.3333333333333333, 53: 0.6666666666666666, 54: 0.6666666666666666} ['41']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.cpp
defaultdict(<class 'collections.Counter'>, {'PASS': Counter({45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 60: 1, 61: 1}), 'FAIL': Counter({45: 9, 46: 9, 47: 9, 48: 9, 49: 9, 50: 9, 51: 9, 52: 9, 53: 9, 56: 9, 57: 9, 58: 9, 59: 9, 54: 5, 60: 3, 61: 3})})
50 {45: 9.0, 46: 9.0, 47: 9.0, 48: 9.0, 49: 9.0, 50: inf, 51: inf, 52: inf, 53: inf, 56: inf, 57: inf, 58: inf, 59: inf, 54: 1.25, 60: 0.42857142857142855, 61: 0.42857142857142855} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({49: 7, 50: 7, 51: 7, 52: 7, 53: 7, 64: 7, 65: 7, 73: 7, 54: 7, 55: 7, 66: 5, 67: 5, 56: 5, 57: 5, 69: 4, 59: 4, 62: 3}), 'PASS': Counter({49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 64: 3, 65: 3, 73: 3, 54: 3, 55: 3, 62: 3, 69: 2, 56: 2, 57: 2, 75: 2, 76: 2, 66: 1, 67: 1, 59: 1})})
49 {49: 2.3333333333333335, 50: 2.3333333333333335, 51: 2.3333333333333335, 52: 2.3333333333333335, 53: 2.3333333333333335, 64: 2.3333333333333335, 65: 2.3333333333333335, 69: 0.8, 66: 1.6666666666666667, 67: 1.6666666666666667, 73: 2.3333333333333335, 54: 2.3333333333333335, 55: 2.3333333333333335, 59: 1.0, 56: 1.25, 57: 1.25, 62: 0.42857142857142855, 75: 0.0, 76: 0.0} ['49']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({44: 7, 45: 7, 46: 7, 47: 7, 48: 7, 49: 7, 55: 7, 50: 7, 51: 7, 52: 7, 53: 7, 54: 7, 56: 7, 57: 7}), 'PASS': Counter({44: 3, 45: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 52: 3, 53: 3, 54: 3, 55: 3, 56: 3, 57: 3})})
44 {44: 2.3333333333333335, 45: 2.3333333333333335, 46: 2.3333333333333335, 47: 2.3333333333333335, 48: 2.3333333333333335, 49: 2.3333333333333335, 55: 2.3333333333333335, 50: 2.3333333333333335, 51: 2.3333333333333335, 52: 2.3333333333333335, 53: 2.3333333333333335, 54: 2.3333333333333335, 56: 2.3333333333333335, 57: 2.3333333333333335} ['46']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({40: 9, 41: 9, 42: 9, 43: 9, 45: 9, 46: 9, 48: 9, 47: 9}), 'PASS': Counter({40: 1, 41: 1, 42: 1, 43: 1, 45: 1, 46: 1, 50: 1, 44: 1})})
48 {40: 9.0, 41: 9.0, 42: 9.0, 43: 9.0, 45: 9.0, 46: 9.0, 48: inf, 47: inf, 50: 0.0, 44: 0.0} ['40']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/MULTIPLY_LARGE_NUMBERS_REPRESENTED_AS_STRINGS.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({57: 10, 58: 10, 59: 10, 60: 10, 61: 10, 62: 10, 63: 10, 64: 10, 65: 10, 66: 10, 67: 10, 68: 10, 69: 10, 70: 10, 71: 10, 72: 10, 74: 10, 75: 10, 77: 2, 78: 2, 79: 2, 80: 2, 81: 2, 82: 2, 83: 2}), 'PASS': Counter()})
57 {57: inf, 58: inf, 59: inf, 60: inf, 61: inf, 62: inf, 63: inf, 64: inf, 65: inf, 66: inf, 67: inf, 68: inf, 69: inf, 70: inf, 71: inf, 72: inf, 74: inf, 75: inf, 77: 0.25, 78: 0.25, 79: 0.25, 80: 0.25, 81: 0.25, 82: 0.25, 83: 0.25} ['81']
Testing /Users/anon/PycharmProjects/SBFL_CPP/codex/java/sbfl/NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N.cpp
defaultdict(<class 'collections.Counter'>, {'FAIL': Counter({43: 10, 44: 10, 45: 10, 46: 10, 47: 9, 48: 9, 49: 9, 50: 9, 52: 6, 53: 3, 54: 3}), 'PASS': Counter()})
43 {43: inf, 44: inf, 45: inf, 46: inf, 47: 9.0, 48: 9.0, 49: 9.0, 50: 9.0, 52: 1.5, 53: 0.42857142857142855, 54: 0.42857142857142855} ['44']
Got it right 10 times.
Total 32
