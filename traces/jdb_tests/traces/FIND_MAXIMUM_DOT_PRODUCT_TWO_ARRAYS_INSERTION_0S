CompletedProcess(args=['javac', '-g', '--module-path', '/Users/anon/Documents/Dev.nosync/JavaControlFlow/Data/javafx-sdk-17.0.0.1/lib', '--add-modules=javafx.base', 'FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S.java'], returncode=0, stdout=b'', stderr=b'')

Statement: int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ];
Line: 28
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2

Statement: for ( int [ ] row : dp )
Line: 29
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}

Statement: Arrays . fill ( row, 0 );
Line: 30
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}
row = { 0, 0, 0, 0 }

Statement: for ( int [ ] row : dp )
Line: 29
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}

Statement: Arrays . fill ( row, 0 );
Line: 30
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}
row = { 0, 0, 0, 0 }

Statement: for ( int [ ] row : dp )
Line: 29
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}

Statement: Arrays . fill ( row, 0 );
Line: 30
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}
row = { 0, 0, 0, 0 }

Statement: for ( int [ ] row : dp )
Line: 29
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}

Statement: for ( int i = 1;
Line: 31
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}

Statement: i <= n;
Line: 32
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}
i = 1

Statement: i ++ ) for ( int j = i;
Line: 33
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}
i = 1

Statement: j <= m;
Line: 34
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 1

Statement: dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );
Line: 36
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 1

Statement: j ++ )
Line: 35
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 0, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 1

Statement: j <= m;
Line: 34
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 0, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 2

Statement: dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );
Line: 36
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 0, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 2

Statement: j ++ )
Line: 35
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 2

Statement: j <= m;
Line: 34
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 3

Statement: dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );
Line: 36
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 0 }, { 0, 0, 0, 0 }}
i = 1
j = 3

Statement: j ++ )
Line: 35
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 0, 0 }}
i = 1
j = 3

Statement: j <= m;
Line: 34
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 0, 0 }}
i = 1
j = 4

Statement: i ++ ) for ( int j = i;
Line: 33
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 0, 0 }}
i = 1

Statement: i <= n;
Line: 32
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 0, 0 }}
i = 2

Statement: i ++ ) for ( int j = i;
Line: 33
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 0, 0 }}
i = 2

Statement: j <= m;
Line: 34
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 0, 0 }}
i = 2
j = 2

Statement: dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );
Line: 36
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 0, 0 }}
i = 2
j = 2

Statement: j ++ )
Line: 35
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 0 }}
i = 2
j = 2

Statement: j <= m;
Line: 34
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 0 }}
i = 2
j = 3

Statement: dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );
Line: 36
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 0 }}
i = 2
j = 3

Statement: j ++ )
Line: 35
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 610 }}
i = 2
j = 3

Statement: j <= m;
Line: 34
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 610 }}
i = 2
j = 4

Statement: i ++ ) for ( int j = i;
Line: 33
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 610 }}
i = 2

Statement: i <= n;
Line: 32
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 610 }}
i = 3

Statement: return dp [ n ] [ m ];
Line: 37
A = { 7, 9, 22, 68 }
B = { 14, 22, 54, 58 }
m = 3
n = 2
dp = { 0, 0, 0, 0 }, { 0, 98, 126, 308 }, { 0, 0, 296, 610 }}
